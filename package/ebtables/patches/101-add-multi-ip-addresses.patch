diff -Nurp ebtables-v2.0.9-1.orig/extensions/ebt_ip.c ebtables-v2.0.9-1/extensions/ebt_ip.c
--- ebtables-v2.0.9-1.orig/extensions/ebt_ip.c	2011-04-07 13:45:03.000000000 +0800
+++ ebtables-v2.0.9-1/extensions/ebt_ip.c	2011-04-07 13:45:33.000000000 +0800
@@ -24,6 +24,8 @@
 #define IP_PROTO  '4'
 #define IP_SPORT  '5'
 #define IP_DPORT  '6'
+#define IP_MSIP '7'
+#define IP_DSTRANGE '8'
 
 static struct option opts[] =
 {
@@ -38,6 +40,8 @@ static struct option opts[] =
 	{ "ip-sport"            , required_argument, 0, IP_SPORT  },
 	{ "ip-destination-port" , required_argument, 0, IP_DPORT  },
 	{ "ip-dport"            , required_argument, 0, IP_DPORT  },
+	{ "ip-msip"            , required_argument, 0, IP_MSIP  },
+	{ "ip-dstrange"            , required_argument, 0, IP_DSTRANGE  },
 	{ 0 }
 };
 
@@ -88,6 +92,74 @@ parse_port_range(const char *protocol, c
 	free(buffer);
 }
 
+static void parse_multi_sip(char *arg, struct ebt_ip_info *ipinfo)
+{
+	char *buf = strdup(arg), *ptr, *next, i;
+	__be32 tmp;
+
+	if (buf)
+	{
+		for (ptr = buf, i = 0; ptr&&(i<SOURCE_SIZE); i++, ptr = next)
+		{
+			next = strchr(ptr, ',');
+			if (next)
+				*next++ = 0;
+			ebt_parse_ip_address(ptr, &ipinfo->msip[i], &tmp);
+		}
+
+		free(buf);
+	}
+}
+
+static void parse_dip_range(char *arg, struct ebt_ip_info *ipinfo)
+{
+	char *buf = NULL, *dash = NULL, *ptr;
+	__be32 tmp;
+
+	buf = strdup(arg);
+
+	if (buf)
+	{
+		ptr = buf;
+		dash = strchr(ptr, '-');
+		if (dash)
+			*dash = '\0';
+
+		ebt_parse_ip_address(ptr, &ipinfo->dip_range[0], &tmp);
+
+		if (dash)
+		{
+			ptr = dash + 1;
+			ebt_parse_ip_address(ptr, &ipinfo->dip_range[1], &tmp);
+		}
+		else
+			ipinfo->dip_range[1] = ipinfo->dip_range[0];
+
+		free(buf);
+	}
+}
+
+static void print_dip_range(uint32_t *dip)
+{
+	int j;
+	if (dip[0] == dip[1])
+	{
+		for (j = 0; j < 4; j++)
+			printf("%d%s",((unsigned char *)&dip[0])[j],
+				   (j == 3) ? "" : ".");
+	}
+	else
+	{
+		for (j = 0; j < 4; j++)
+			printf("%d%s",((unsigned char *)&dip[0])[j],
+				   (j == 3) ? "" : ".");
+		printf("-");
+		for (j = 0; j < 4; j++)
+			printf("%d%s",((unsigned char *)&dip[1])[j],
+				   (j == 3) ? " " : ".");
+	}
+}
+
 static void print_port_range(uint16_t *ports)
 {
 	if (ports[0] == ports[1])
@@ -105,7 +177,10 @@ static void print_help()
 "--ip-tos    [!] tos           : ip tos specification\n"
 "--ip-proto  [!] protocol      : ip protocol specification\n"
 "--ip-sport  [!] port[:port]   : tcp/udp source port or port range\n"
-"--ip-dport  [!] port[:port]   : tcp/udp destination port or port range\n");
+"--ip-dport  [!] port[:port]   : tcp/udp destination port or port range\n"
+"--ip-msip address1,address2,address3... : multipule ip sources\n"
+"--ip-dstrange address1[-address2]: destination ip range\n"
+);
 }
 
 static void init(struct ebt_entry_match *match)
@@ -122,6 +197,8 @@ static void init(struct ebt_entry_match 
 #define OPT_PROTO  0x08
 #define OPT_SPORT  0x10
 #define OPT_DPORT  0x20
+#define OPT_MSIP  0x40
+#define OPT_DSTRANGE 0x80
 static int parse(int c, char **argv, int argc, const struct ebt_u_entry *entry,
    unsigned int *flags, struct ebt_entry_match **match)
 {
@@ -198,6 +275,20 @@ static int parse(int c, char **argv, int
 		}
 		ipinfo->bitmask |= EBT_IP_PROTO;
 		break;
+	case IP_MSIP:
+		ebt_check_option2(flags, OPT_MSIP);
+		ipinfo->bitmask |= EBT_IP_MSIP;
+		if (ebt_check_inverse2(optarg))
+			ipinfo->invflags |= EBT_IP_MSIP;
+		parse_multi_sip(optarg, ipinfo);
+		break;
+	case IP_DSTRANGE:
+		ebt_check_option2(flags, OPT_DSTRANGE);
+		ipinfo->bitmask |= EBT_IP_DSTRANGE;
+		if (ebt_check_inverse2(optarg))
+			ipinfo->invflags |= EBT_IP_DSTRANGE;
+		parse_dip_range(optarg, ipinfo);
+		break;
 	default:
 		return 0;
 	}
@@ -280,6 +371,64 @@ static void print(const struct ebt_u_ent
 			printf("! ");
 		print_port_range(ipinfo->dport);
 	}
+	if (ipinfo->bitmask & EBT_IP_MSIP) {
+		int i;
+		if (ipinfo->invflags & EBT_IP_MSIP)
+			printf("! ");
+		printf("--ip-msip ");
+		for (i = 0; i < SOURCE_SIZE; i++)
+		{
+			if (ipinfo->msip[i])
+			{
+				for (j = 0; j < 4; j++)
+					printf("%d%s",((unsigned char *)&ipinfo->msip[i])[j],
+						   (j == 3) ? "" : ".");
+				if (( i != (SOURCE_SIZE-1) && ipinfo->msip[i+1]))
+					printf(",");
+			}
+		}
+		printf(" ");
+	}
+	if (ipinfo->bitmask & EBT_IP_DSTRANGE) {
+		printf("--ip-dstrange ");
+		if (ipinfo->invflags & EBT_IP_DSTRANGE)
+			printf("! ");
+		print_dip_range(ipinfo->dip_range);
+	}
+}
+
+static int check_msip(struct ebt_ip_info *ipinfo1, struct ebt_ip_info *ipinfo2)
+{
+	int i, j, flag;
+	unsigned int map1 = 0, map2 = 0, cmp_map = 0;
+
+	for (i = 0; i < SOURCE_SIZE; i++)
+	{
+		if (ipinfo1->msip[i])
+			map1 |= 1 << i;
+		if (ipinfo2->msip[i])
+			map2 |= 1 << i;
+	}
+	if (map1 != map2)
+		return 1;
+
+	for (i = 0; i < SOURCE_SIZE; i++)
+	{
+		if (ipinfo1->msip[i])
+		{
+			for (j = 0; j < SOURCE_SIZE; j++)
+			{
+				if (ipinfo2->msip[j] &&
+					(ipinfo2->msip[j] == ipinfo1->msip[i]))
+					cmp_map |= 1<<i;
+			}
+		}
+	}
+
+	if (map1 == cmp_map)
+		return 0;
+	else
+		return 1;
 }
 
 static int compare(const struct ebt_entry_match *m1,
@@ -322,6 +471,17 @@ static int compare(const struct ebt_entr
 		   ipinfo1->dport[1] != ipinfo2->dport[1])
 			return 0;
 	}
+	if (ipinfo1->bitmask & EBT_IP_MSIP)
+	{
+		if (check_msip(ipinfo1, ipinfo2))
+			return 0;
+	}
+	if (ipinfo1->bitmask & EBT_IP_DSTRANGE)
+	{
+		if (ipinfo1->dip_range[0]!=ipinfo2->dip_range[0] ||
+			ipinfo1->dip_range[1]!=ipinfo2->dip_range[1])
+			return 0;
+	}	
 	return 1;
 }
 
diff -Nurp ebtables-v2.0.9-1.orig/include/linux/netfilter_bridge/ebt_ip.h ebtables-v2.0.9-1/include/linux/netfilter_bridge/ebt_ip.h
--- ebtables-v2.0.9-1.orig/include/linux/netfilter_bridge/ebt_ip.h	2011-04-07 13:45:03.000000000 +0800
+++ ebtables-v2.0.9-1/include/linux/netfilter_bridge/ebt_ip.h	2011-04-07 13:46:20.000000000 +0800
@@ -21,10 +21,13 @@
 #define EBT_IP_PROTO 0x08
 #define EBT_IP_SPORT 0x10
 #define EBT_IP_DPORT 0x20
+#define EBT_IP_MSIP  0x40
+#define EBT_IP_DSTRANGE 0x80
 #define EBT_IP_MASK (EBT_IP_SOURCE | EBT_IP_DEST | EBT_IP_TOS | EBT_IP_PROTO |\
- EBT_IP_SPORT | EBT_IP_DPORT )
+ EBT_IP_SPORT | EBT_IP_DPORT | EBT_IP_MSIP | EBT_IP_DSTRANGE)
 #define EBT_IP_MATCH "ip"
 
+#define SOURCE_SIZE 8
 /* the same values are used for the invflags */
 struct ebt_ip_info
 {
@@ -38,6 +41,8 @@ struct ebt_ip_info
 	uint8_t  invflags;
 	uint16_t sport[2];
 	uint16_t dport[2];
+	__be32 msip[SOURCE_SIZE];
+	__be32 dip_range[2];
 };
 
 #endif
