#!/bin/sh

export DNI_CONFIG=1

# Get the needed variable for configuring wireless and translate to
# content to more readable value.

# g/n interface is wlan1 and a/n interface is wlan0
wlg_radio_id=1
wlg_guest_radio_id=0
wla_radio_id=0
wla_guest_radio_id=1
wlg_wds_repeater_radio_id=0
wla_wds_repeater_radio_id=1
num_radio=0
num_interface=0

onoff_0="off"
onoff_1="on"
onoff_="off"

onoff_inv_0="on"
onoff_inv_1="off"
onoff_inv_="off"

sectype_1="off"
sectype_2="wep"
sectype_3="psk"
sectype_4="psk2"
sectype_5="psk_mixed"
sectype_6="wpa"

wep_auth_type_0="open"
wep_auth_type_1="shared"
wep_auth_type_2="auto"

preamble_0="auto"
preamble_1="short"
preamble_2="long"

country_code_0=710              # Africa
country_code_1=156              # Asia china
country_code_2=5000             # Australi
country_code_3=5001             # Canada
country_code_4=276              # Europe Germany
country_code_5=376              # Israel
country_code_6=392              # Japan
country_code_7=412              # Korea
country_code_8=484              # Mexica
country_code_9=76               # South America Brazil
country_code_10=841             # United States
country_code_11=376             # Middle East, use Israel instead

wps_status_5="configured"
wps_status_1="unconfigured"

wds_role_0="repeater"
wds_role_1="rootap"

export_set() {
    [ -n "$3" ] && {
        eval export -- "${1}_${2}=\${3}"
    }
}

if [ -n "$DNI_CONFIG" ]; then
    eval wlg_if_onoff=\$onoff_`config get endis_wl_radio`
    eval wla_if_onoff=\$onoff_`config get endis_wla_radio`
    eval wlg_guest_if_onoff=\$onoff_`config get wlg1_endis_guestNet`
    eval wla_guest_if_onoff=\$onoff_`config get wla1_endis_guestNet`
    lan_ipaddr=`config get lan_ipaddr`

    if [ "x$wlg_if_onoff" = "xon" -o "x$FORCE_CREATE_VAP" = "xon" ]; then
        wlg_ssid=`config get wl_ssid`
        wlg_channel=`config get wl_hidden_channel`
        #if [ "$wlg_channel" = "0" ]; then wlg_channel="11ng"; fi
        wlg_chmode=`config get wl_simple_mode`
        eval wlg_pureg_onoff=\$onoff_`config get wl_pureg`
        eval wlg_puren_onoff=\$onoff_`config get wl_puren`
        eval wlg_sectype=\$sectype_`config get wl_sectype`
        eval wlg_auth=`config get wl_auth`
        eval wlg_hide_ssid_onoff=\$onoff_inv_`config get endis_ssid_broadcast`
        wlg_rts=`config get wl_rts`
        wlg_frag=`config get wl_frag`
        eval wlg_wmm_onoff=\$onoff_`config get endis_wl_wmm`
        eval wlg_preamble=\$preamble_`config get wl_plcphdr`
        eval wlg_country_ie_onoff=\$onoff_`config get wl_endis_country_ie`

        eval wlg_wps_configured=\$wps_status_`config get wps_status`
        wlg_wps_ap_setup_locked=`config get endis_pin`
        eval wlg_wps_onoff=\$onoff_`config get endis_wl_wps`
        eval wlg_acl_onoff=\$onoff_`config get wl_access_ctrl_on`
        eval wlg_wds_onoff=\$onoff_`config get wds_endis_fun`
        eval wlg_wds_role=\$wds_role_`config get wds_repeater_basic`
	eval wlg_wds_basicsta_mac=`config get basic_station_mac`
	eval wlg_repeater_mac1=`config get repeater_mac1`
	eval wlg_repeater_mac2=`config get repeater_mac2`
	eval wlg_repeater_mac3=`config get repeater_mac3`
	eval wlg_repeater_mac4=`config get repeater_mac4`


        eval wlg_wds_repeater_assoc_onoff=\$onoff_inv_`config get wds_endis_ip_client`
        eval wlg_lan_restricted_access_onoff=\$onoff_`config get endis_wlg_wireless_isolation`
        eval wlg_wireless_isolation_onoff=\$onoff_`config get endis_wlg_wireless_isolation`
        wlg_powerctrl=`config get wl_txctrl`
        wlg_disablecoext=`config get wl_disablecoext`
    fi
        eval wl_repeater_ip=`config get repeater_ip`
    if [ "x$wla_if_onoff" = "xon" ]; then
        wla_ssid=`config get wla_ssid`
        wla_channel=`config get wla_hidden_channel`
        #if [ "$wla_channel" = "0" ]; then wla_channel="11na"; fi
        wla_chmode=`config get wla_simple_mode`
        eval wla_sectype=\$sectype_`config get wla_sectype`
        eval wla_auth=`config get wla_auth`
        eval wla_hide_ssid_onoff=\$onoff_inv_`config get wla_endis_ssid_broadcast`
        wla_rts=`config get wla_rts`
        wla_frag=`config get wla_frag`
        eval wla_wmm_onoff=\$onoff_`config get endis_wla_wmm`
        eval wla_preamble=\$preamble_`config get wla_plcphdr`
        eval wla_country_ie_onoff=\$onoff_`config get wla_endis_country_ie`

	eval wla_wps_configured=\$wps_status_`config get wla_wps_status`
        wla_wps_ap_setup_locked=`config get wla_endis_pin`
        eval wla_wps_onoff=\$onoff_`config get endis_wla_wps`
        eval wla_acl_onoff=\$onoff_`config get wla_access_ctrl_on`

        eval wla_wds_onoff=\$onoff_`config get wla_wds_endis_fun`
        eval wla_wds_role=\$wds_role_`config get wds_repeater_basic_a`
        eval wla_wds_repeater_assoc_onoff=\$onoff_inv_`config get wds_endis_ip_client_a`
	eval wla_wds_basicsta_mac=`config get basic_station_mac_a`
        eval wla_repeater_mac1=`config get repeater_mac1_a`
        eval wla_repeater_mac2=`config get repeater_mac2_a`
        eval wla_repeater_mac3=`config get repeater_mac3_a`
        eval wla_repeater_mac4=`config get repeater_mac4_a`


        eval wla_lan_restricted_access_onoff=\$onoff_`config get endis_wla_wireless_isolation`
        eval wla_wireless_isolation_onoff=\$onoff_`config get endis_wla_wireless_isolation`
        wla_powerctrl=`config get wla_txctrl`
        eval wla_video_mode_onoff=\$onoff_`config get wla_enable_video_value`
        wla_disablecoext=`config get wla_disablecoext`
    fi

    if [ "x$wlg_guest_if_onoff" = "xon" -o "x$FORCE_CREATE_VAP" = "xon" ]; then
        wlg_guest_ssid=`config get wlg1_ssid`
        eval wlg_guest_sectype=\$sectype_`config get wlg1_sectype`
        eval wlg_guest_auth=`config get wlg1_auth`
        # The parameter of iwpriv to enable and disable SSID broadcast is
        # hide_ssid, and the varible in system is ssid_broadcast, so
        # using onoff_inv to convert the value read from system.
        eval wlg_guest_hide_ssid_onoff=\$onoff_inv_`config get wlg1_endis_guestSSIDbro`
        eval wlg_guest_wps_onoff="off"
        eval wlg_guest_lan_restricted_access_onoff=\$onoff_inv_`config get wlg1_endis_allow_guest`
        eval wlg_guest_wireless_isolation_onoff=\$onoff_`config get endis_wlg_guest_wireless_isolation`
    fi

    if [ "x$wla_guest_if_onoff" = "xon" -o "x$FORCE_CREATE_VAP" = "xon" ]; then
        wla_guest_ssid=`config get wla1_ssid`
        eval wla_guest_sectype=\$sectype_`config get wla1_sectype`
        eval wla_guest_auth=`config get wla1_auth`
        # The parameter of iwpriv to enable and disable SSID broadcast is
        # hide_ssid, and the varible in system is ssid_broadcast, so
        # using onoff_inv to convert the value read from system.
        eval wla_guest_hide_ssid_onoff=\$onoff_inv_`config get wla1_endis_guestSSIDbro`
        eval wla_guest_wps_onoff="off"
        eval wla_guest_lan_restricted_access_onoff=\$onoff_inv_`config get wla1_endis_allow_guest`
        eval wla_guest_wireless_isolation_onoff=\$onoff_`config get endis_wla_guest_wireless_isolation`
        eval wla_guest_video_mode_onoff=\$onoff_`config get wla1_enable_video_value`
    fi

    eval country_code=\$country_code_`config get wl_country`

    # WPS configuration
    wps_device_name=`config get netbiosname`

    wds_stp_onoff="on"

    # Guest access local network configuration
    lan_restricted_access_init_printed="no"  # check if guest access init has been printed
    wsc_upnp_ad_period=`config get upnp_AdverTime`
    wsc_upnp_ad_ttl=`config get upnp_TimeToLive`
    wl_dtim_wo_guest=`config get wl_dtim_wo_guest`
    wl_dtim_w_guest=`config get wl_dtim_w_guest`
    wl_guest_dtim=`config get wl_guest_dtim`
    wl_dtim_wo_guest=${wl_dtim_wo_guest:-2}
    wl_dtim_w_guest=${wl_dtim_w_guest:-2}
    wl_guest_dtim=${wl_guest_dtim:-2}
fi

load_wep_config()
{
    if [ -n "$DNI_CONFIG" ]; then
        local _wl=$1
        local _trans=$2

        config show | grep ${_wl}_key > /tmp/wepkey-$$

        if [ -n $_trans ]; then
            sed -i -e "s/$_wl/$_trans/g" /tmp/wepkey-$$
        fi
        . /tmp/wepkey-$$
        rm /tmp/wepkey-$$
    fi
}

load_wpa_config()
{
    if [ -n "$DNI_CONFIG" ]; then
        local _wl=$1
        local _sectype=$2

        wl_sectype=`config get ${_wl}_wpae_mode`
        wl_auth_sv_ip=`config get ${_wl}_radiusSerIp`
        wl_auth_sv_port=`config get ${_wl}_radiusPort`
        wl_auth_sv_secret=`config get ${_wl}_radiusSecret`
        case "$wl_sectype" in
            *TKIPAES)
                wl_wpa=3
                wl_crypto="CCMP\\ TKIP"
                ;;
            *AES)
                wl_wpa=2
                wl_crypto="CCMP"
                ;;
            *)
                wl_wpa=1
                wl_crypto="TKIP"
                ;;
        esac
    fi
}

dni_config_get()
{
    if [ -n "$DNI_CONFIG" ]; then
        if [ "x$1" != "x" -a "x$2" != "x" ]; then
            case "$2" in
                wds_endis_mac_client*)
                    local _qans
                    eval _qans=\$onoff_inv_`config get $2`
                    eval export -- "${1}=\${_qans}"
                    ;;
                *)
                    local _qans=`config get $2`
                    eval export -- "${1}=\${_qans}"
                    ;;
            esac
        fi
    fi
}

dni_config_get_psk_phrase()
{
    local _wl=$2
    local _sectype=$3
    local _tmp_psk

    if [ -n "$DNI_CONFIG" ]; then
       # crypto defaults: WPA2 vs WPA1
        case "$_sectype" in
            wpa2*|WPA2*|*PSK2*|*psk2*)
                _tmp_psk=`config get ${_wl}_wpa2_psk`
                ;;
            *mixed*)
                _tmp_psk=`config get ${_wl}_wpas_psk`
                ;;
            *)
                _tmp_psk=`config get ${_wl}_wpa1_psk`
                ;;
        esac
        eval export -- "${1}=\$_tmp_psk"
    elif [ -n "$OPENWRT_CONFIG" ]; then
        [ "$_wl" = "wl" ] && _wl="wlg"
        eval export -- "${1}=\$"${_wl}_key""
    fi
}
