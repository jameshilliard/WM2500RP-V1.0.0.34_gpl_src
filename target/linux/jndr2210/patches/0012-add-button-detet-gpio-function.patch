--- linux-2.6.30/drivers/char/rtl_gpio.c.old	2011-12-06 08:36:52.263460413 -0500
+++ linux-2.6.30/drivers/char/rtl_gpio.c	2011-12-06 08:42:31.243460370 -0500
@@ -447,6 +447,277 @@
 int start_count_time=0;
 int Reboot_Wait=0;
 
+#define OS_TIMER_FUNC(_fn)                      \
+    void _fn(unsigned long timer_arg)
+
+#define OS_GET_TIMER_ARG(_arg, _type)           \
+    (_arg) = (_type)(timer_arg)
+
+#define OS_INIT_TIMER(_osdev, _timer, _fn, _arg) \
+do {                                             \
+        init_timer(_timer);                      \
+        (_timer)->function = (_fn);              \
+        (_timer)->data = (unsigned long)(_arg);  \
+} while (0)
+
+#define OS_SET_TIMER(_timer, _ms)       mod_timer(_timer, jiffies + ((_ms)*HZ)/1000)
+
+#define OS_CANCEL_TIMER(_timer)         del_timer(_timer)
+
+
+struct timer_list  os_butdet_t;        /* button detect */
+struct timer_list  os_staled_t; /* Status LED blinking */
+struct timer_list  os_diswps_t; /* WPS LED blinking while WPS error occured,
+                                   like push button is pressed if WPS was disabled */
+
+/* GPIO pins */
+//#define WLAN_LED_GPIO 0
+#define POWER_LED_GPIO 2       /* green */
+#define STATUS_LED_GPIO 6     /* amber */
+#define WPS_LED_GPIO  4
+//#define WLAN_BUTTON_GPIO 23
+#define WPS_BUTTON_GPIO 3
+#define RESET_BUTTON_GPIO 5
+
+/* LED active voltage */
+/**
+ * AR9331 GPIOs Define - WNR1000v4
+ * GPIO 0: WIFI  LED (Output Pin/Active HIGH)
+ * GPIO 1: POWER LED (Output Pin/Active HIGH)
+ * GPIO 26: WPS LED
+ * GPIO 27: SYSTEM  LED (Output Pin/Active LOW)
+#define ACTIVE_HIGH_VOLTAGE (0 |       \
+                               (1 << WLAN_LED_GPIO) | \
+                               (1 << POWER_LED_GPIO))
+ **/
+#define ACTIVE_HIGH_VOLTAGE    0x3
+#define LED_ON(gpio)   (((1 << gpio) & ACTIVE_HIGH_VOLTAGE) ? 1 : 0)
+#define LED_OFF(gpio)  (((1 << gpio) & ACTIVE_HIGH_VOLTAGE) ? 0 : 1)
+
+#define POLL_INTERVAL          100     /* millisecond */
+#define TIME_5SECONDS          5000    /* millisecond */
+#define COUNT_5SECONDS         50      /* (TIME_5SECONDS / POLL_INTERVAL) */
+#define TIME_750MSECONDS       750     /* millisecond */
+#define TIME_250MSECONDS       250     /* millisecond */
+#define WPS_LED_ERR_INTERVAL    100     /* millisecond */
+
+
+typedef enum {
+       free = 0,       /* release button, pop up */
+       push = 1,       /* press button */
+       hold = 2,       /* press button and hold pushed state */
+}but_state_t;
+typedef enum{
+       OFF=0,
+       ON=1,
+}led_status;
+static but_state_t wifibut = free;     /* WLAN switch */
+static but_state_t pushbut = free;     /* Push button */
+static but_state_t resetbut = free;    /* Reset button */
+
+static int rstbut_count = 0;
+
+static struct proc_dir_entry *simple_config_entry = NULL;
+static struct proc_dir_entry *wps_entry = NULL;
+static struct proc_dir_entry *button_state = NULL;
+static struct proc_dir_entry *disable_wps = NULL;       /* WPS is disabled? write into: 1 => disable, 0 => enable */
+static int wps_led_blinking = 0;
+static int diswps = 0;  /* 0 => WPS is enabled, 1 => WPS is disabled */
+static int diswps_blink_count = 0; /* max value: 50, blinking 5 seconds */
+
+
+void led_on_off(int gpio, led_status status)
+{
+       if(status)
+               RTL_W32(AUTOCFG_LED_DATABASE, (RTL_R32(AUTOCFG_LED_DATABASE) & (~(1 << gpio))));
+       else
+               RTL_W32(AUTOCFG_LED_DATABASE, (RTL_R32(AUTOCFG_LED_DATABASE) | (1 << gpio)));
+}
+static int button_state_read (char *page, char **start, off_t off,
+                               int count, int *eof, void *data)
+{
+       /**
+        * return states of all buttons.
+        * return value: <PUSHBUTTONstate><WIFIBUTTONstate><RESETBUTTONstate>
+        *   <PUSHBUTTONstate>=1x       #'x' value: 0 - free, 1 - pressed
+        *   <WIFIBUTTONstate>=2x       #'x' value: 0 - free, 1 - pressed
+        *   <RESETBUTTONstate>=3x      #'x' value: 0 - free, 1 - pressed(time<5s), 2 - pressed(time>5s)
+        **/
+        return sprintf(page, "1%u2%u3%u\n", \
+               (u_int32_t)pushbut, \
+               (u_int32_t)wifibut, \
+               (u_int32_t)resetbut);
+}
+static int button_state_write (struct file *file, const char *buf,
+                                        unsigned long count, void *data)
+{
+       /**
+        * set state of button.
+        * valid value: <Button number><value>
+        *   <Button number>: 1 - Push button, 2 - WiFi button, 3 - Reset button
+        *   <value>: should be 0, that indicate the event of button pressed is handled by upper process.
+        **/
+        u_int32_t num, val;
+        char *msg = "Error: valid value inputted into /proc/simple_config/button_state should as below.\n" \
+                       "  <Button number><value>\n" \
+                       "\t<Button number>: 1 - Push button, 2 - WiFi button, 3 - Reset button.\n" \
+                       "\t<value> should be 0.\n";
+
+        num = (u_int32_t)(*buf - '0');
+        val = (u_int32_t)(*(buf + 1) - '0');
+
+        if (val != 0) {
+               printk("%s", msg);
+               return count;
+        }
+
+        switch (num) {
+        case 1:
+               pushbut = free;
+               break;
+        case 2:
+               wifibut = free;
+               break;
+        case 3:
+               resetbut = free;
+               break;
+        default:
+               printk("%s", msg);
+               break;
+        }
+
+        return count;
+}
+static int disable_wps_read (char *page, char **start, off_t off,
+                               int count, int *eof, void *data)
+{
+        return 0;
+}
+static int disable_wps_write (struct file *file, const char *buf,
+                                        unsigned long count, void *data)
+{
+        u_int32_t val;
+
+        if (sscanf(buf, "%d", &val) != 1)
+                return -EINVAL;
+
+        if (val == 1) { /* WPS was disabled */
+                diswps = 1;
+        } else if (val == 0) { /* WPS was enabled */
+                diswps = 0;
+                OS_CANCEL_TIMER(&os_diswps_t);
+        }
+
+        return count;
+}
+
+static OS_TIMER_FUNC(diswps_led_blink)
+{
+        static int onoff = 0;
+
+        if (!diswps ||  diswps_blink_count <= 0)
+                return;
+
+        if (onoff) {
+                 led_on_off(WPS_LED_GPIO, OFF);
+        } else {
+                  led_on_off(WPS_LED_GPIO, ON);
+        }
+        onoff = 1 - onoff;
+        diswps_blink_count--;
+        if (diswps_blink_count == 0) {
+                  led_on_off(WPS_LED_GPIO, ON);
+        }
+        OS_SET_TIMER(&os_diswps_t, WPS_LED_ERR_INTERVAL);
+}
+
+static OS_TIMER_FUNC(statusled_blink)
+{
+        static int onoff = 0;
+        if (onoff) {
+                               led_on_off(POWER_LED_GPIO, OFF);
+                               led_on_off(STATUS_LED_GPIO, OFF);
+                OS_SET_TIMER(&os_staled_t, TIME_750MSECONDS);
+        } else {
+                               led_on_off(POWER_LED_GPIO, OFF);
+                               led_on_off(STATUS_LED_GPIO, ON);
+                OS_SET_TIMER(&os_staled_t, TIME_250MSECONDS);
+        }
+        onoff = 1 - onoff;
+}
+static OS_TIMER_FUNC(button_detect)
+{
+       static int staled_s = 0;
+       static int wifibut_s = 0;
+       static int pushbut_s = 0;
+
+#if 0 //jndr2210 do not have wlan on off button
+       /* GPIO 23: WIRELESS ON/OFF(Input Pin / Active LOW) */
+       if (!ar7240_gpio_in_val(WLAN_BUTTON_GPIO)) {
+               if (!wifibut_s) {
+                       wifibut_s = 1;
+                       wifibut = push;
+               }
+       } else {
+               if (wifibut_s) {
+                       wifibut_s = 0;
+               }
+       }
+#endif
+       /* GPIO 11: JUMPSTART (Input Pin / Active HIGH) */
+         if(!(RTL_R32(RESET_PIN_DATABASE) & (1 << WPS_BUTTON_GPIO)) ){
+                if (!pushbut_s) {
+                        pushbut_s = 1;
+                        pushbut = push;
+                        /* blink WPS LED more than 5 seconds if WPS is disable */
+                        if (diswps) {
+                                diswps_blink_count = 50;
+                                OS_SET_TIMER(&os_diswps_t, WPS_LED_ERR_INTERVAL);
+                        }
+                }
+                /* if WPS was disabled, and push button is pressed and hold, just blink WPS LED
+                 * until push button is free, and then continue blink WPS LED 5 seconds */
+                if (diswps)
+                        diswps_blink_count = 50;
+        } else {
+                if (pushbut_s) {
+                        pushbut_s = 0;
+                }
+
+       }
+
+       /* GPIO 12: RESET SWITCH (Input Pin/Active LOW) */
+       if(!(RTL_R32(RESET_PIN_DATABASE) & (1 << RESET_BUTTON_GPIO)) ){
+               /*the button is pressed*/
+               rstbut_count++;
+               /* turn off POWER LED, turn on STATUS LED (amber), set timer, blinking STATUS LED */
+               if (!staled_s) {
+                                          led_on_off(POWER_LED_GPIO, OFF);
+                                         led_on_off(STATUS_LED_GPIO, ON);
+                       OS_SET_TIMER(&os_staled_t, TIME_5SECONDS);
+                       staled_s = 1;
+               }
+       } else {
+               if (COUNT_5SECONDS <= rstbut_count)
+                       resetbut = hold;
+               else if (0 < rstbut_count && COUNT_5SECONDS > rstbut_count)
+                       resetbut = push;
+               /* turn off POWER & STATUS LEDs, cancel timer */
+               if (staled_s) {
+                      OS_CANCEL_TIMER(&os_staled_t);
+                                          led_on_off(POWER_LED_GPIO, OFF);
+                                          led_on_off(STATUS_LED_GPIO, OFF);
+                       staled_s = 0;
+               }
+               rstbut_count = 0;
+       }
+
+       OS_SET_TIMER(&os_butdet_t, POLL_INTERVAL);
+}
+
+
+
+
 static int get_dc_pwr_plugged_state();
 
 
@@ -1537,6 +1808,7 @@
 	mod_timer(&pocket_ap_timer, jiffies + HZ);
 #endif
 
+#if 0
 	init_timer(&probe_timer);
 	probe_counter = 0;
 	probe_state = PROBE_NULL;
@@ -1544,7 +1816,40 @@
 	probe_timer.data = (unsigned long)NULL;
 	probe_timer.function = &rtl_gpio_timer;
 	mod_timer(&probe_timer, jiffies + HZ);
+#endif
+
+    if (simple_config_entry != NULL) {
+        printk ("Already have a proc entry for /proc/simple_config!\n");
+        return -ENOENT;
+    }
+
+    simple_config_entry = proc_mkdir("simple_config", NULL);
+    if (!simple_config_entry)
+        return -ENOENT;
+
+    button_state = create_proc_entry ("button_state", 0644,
+                                            simple_config_entry);
+    if (!button_state)
+        return -ENOENT;
+
+    button_state->write_proc = button_state_write;
+    button_state->read_proc = button_state_read;
+
+    disable_wps = create_proc_entry ("diswps", 0644,
+                                            simple_config_entry);
+    if (!disable_wps)
+        return -ENOENT;
+
+    disable_wps->write_proc = disable_wps_write;
+    disable_wps->read_proc = disable_wps_read;
+
+    /* inital timer */
+    OS_INIT_TIMER(NULL, &os_butdet_t, button_detect, &os_butdet_t);
+    OS_INIT_TIMER(NULL, &os_staled_t, statusled_blink, &os_staled_t);
+    OS_INIT_TIMER(NULL, &os_diswps_t, diswps_led_blink, &os_diswps_t);
 
+    /* enable timer */
+    OS_SET_TIMER(&os_butdet_t, POLL_INTERVAL);
 #ifdef CONFIG_RTL865X_CMO
 	extra_led_gpio_init();
 #endif
