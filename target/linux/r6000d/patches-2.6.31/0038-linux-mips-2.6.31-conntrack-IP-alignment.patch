diff -Nurp linux-2.6.31.orig/include/linux/ip.h linux-2.6.31/include/linux/ip.h
--- linux-2.6.31.orig/include/linux/ip.h	2011-11-28 16:51:32.000000000 +0800
+++ linux-2.6.31/include/linux/ip.h	2011-11-28 17:20:49.000000000 +0800
@@ -82,6 +82,27 @@
 
 #define IPV4_BEET_PHMAXLEN 8
 
+#ifdef CONFIG_IP_NF_IP_ALIGNMENT
+/*
+ * When MIPS CPU running under 32bit mode, 'unsigned int' MUST 32bit aligned.
+ * Some PHY receives IP packet with 16 bits aligned: the DMA address MUST be
+ * started with 32bit aligned, and it doesn't do 2 bytes padding, minus 14 bytes
+ * Ethernet header, the IP header will be 16 bits aligned. When accessing 4 bytes
+ * size of saddr/daddr, it will cause unalignment exception.
+ *
+ * @src: It SHOULD be 16bit aligned at least;
+ * @dest: It SHOULD be 16bit aligned at least, most of the time it is 32bit aligned;
+ */
+static inline void u32_set(void *dest, const void *src)
+{
+	__be16 *d = (__be16 *) dest;
+	__be16 *s = (__be16 *) src;
+
+	/* use 2 x 2 bytes set, instead of 4 bytes assignment directly. */
+	*d++ = *s++; *d = *s;
+}
+#endif
+
 struct iphdr {
 #if defined(__LITTLE_ENDIAN_BITFIELD)
 	__u8	ihl:4,
diff -Nurp linux-2.6.31.orig/net/ipv4/ip_fragment.c linux-2.6.31/net/ipv4/ip_fragment.c
--- linux-2.6.31.orig/net/ipv4/ip_fragment.c	2011-11-28 16:51:32.000000000 +0800
+++ linux-2.6.31/net/ipv4/ip_fragment.c	2011-11-28 18:46:41.000000000 +0800
@@ -232,7 +232,14 @@ static inline struct ipq *ip_find(struct
 	arg.user = user;
 
 	read_lock(&ip4_frags.lock);
+#ifdef CONFIG_IP_NF_IP_ALIGNMENT
+	__be32 saddr, daddr;
+	u32_set(&saddr, &iph->saddr);
+	u32_set(&daddr, &iph->daddr);
+	hash = ipqhashfn(iph->id, saddr, daddr, iph->protocol);
+#else
 	hash = ipqhashfn(iph->id, iph->saddr, iph->daddr, iph->protocol);
+#endif
 
 	q = inet_frag_find(&net->ipv4.frags, &ip4_frags, &arg, hash);
 	if (q == NULL)
diff -Nurp linux-2.6.31.orig/net/ipv4/ip_input.c linux-2.6.31/net/ipv4/ip_input.c
--- linux-2.6.31.orig/net/ipv4/ip_input.c	2011-11-28 16:51:32.000000000 +0800
+++ linux-2.6.31/net/ipv4/ip_input.c	2011-11-28 20:16:11.000000000 +0800
@@ -330,8 +330,15 @@ static int ip_rcv_finish(struct sk_buff 
 	 *	how the packet travels inside Linux networking.
 	 */
 	if (skb_dst(skb) == NULL) {
+#ifdef CONFIG_IP_NF_IP_ALIGNMENT
+		__be32 saddr, daddr;
+		u32_set(&saddr, &iph->saddr);
+		u32_set(&daddr, &iph->daddr);
+		int err = ip_route_input(skb, daddr, saddr, iph->tos, skb->dev);
+#else
 		int err = ip_route_input(skb, iph->daddr, iph->saddr, iph->tos,
 					 skb->dev);
+#endif
 		if (unlikely(err)) {
 			if (err == -EHOSTUNREACH)
 				IP_INC_STATS_BH(dev_net(skb->dev),
diff -Nurp linux-2.6.31.orig/net/ipv4/netfilter/iptable_mangle.c linux-2.6.31/net/ipv4/netfilter/iptable_mangle.c
--- linux-2.6.31.orig/net/ipv4/netfilter/iptable_mangle.c	2011-11-28 16:51:32.000000000 +0800
+++ linux-2.6.31/net/ipv4/netfilter/iptable_mangle.c	2011-11-28 18:46:21.000000000 +0800
@@ -137,8 +137,13 @@ ipt_local_hook(unsigned int hook,
 	/* Save things which could affect route */
 	mark = skb->mark;
 	iph = ip_hdr(skb);
+#ifdef CONFIG_IP_NF_IP_ALIGNMENT
+	u32_set(&saddr, &iph->saddr);
+	u32_set(&daddr, &iph->daddr);
+#else
 	saddr = iph->saddr;
 	daddr = iph->daddr;
+#endif
 	tos = iph->tos;
 
 	ret = ipt_do_table(skb, hook, in, out,
@@ -147,10 +152,20 @@ ipt_local_hook(unsigned int hook,
 	if (ret != NF_DROP && ret != NF_STOLEN && ret != NF_QUEUE) {
 		iph = ip_hdr(skb);
 
+#ifdef CONFIG_IP_NF_IP_ALIGNMENT
+		__be32 new_saddr, new_daddr;
+		u32_set(&new_saddr, &iph->saddr);
+		u32_set(&new_daddr, &iph->daddr);
+		if (new_saddr != saddr ||
+		    new_daddr != daddr ||
+		    skb->mark != mark ||
+		    iph->tos != tos)
+#else
 		if (iph->saddr != saddr ||
 		    iph->daddr != daddr ||
 		    skb->mark != mark ||
 		    iph->tos != tos)
+#endif
 			if (ip_route_me_harder(skb, RTN_UNSPEC))
 				ret = NF_DROP;
 	}
diff -Nurp linux-2.6.31.orig/net/ipv4/netfilter/ip_tables.c linux-2.6.31/net/ipv4/netfilter/ip_tables.c
--- linux-2.6.31.orig/net/ipv4/netfilter/ip_tables.c	2011-11-28 16:51:32.000000000 +0800
+++ linux-2.6.31/net/ipv4/netfilter/ip_tables.c	2011-11-28 18:26:22.000000000 +0800
@@ -99,10 +99,19 @@ ip_packet_match(const struct iphdr *ip,
 	if (ipinfo->flags & IPT_F_NO_DEF_MATCH)
 		return true;
 
+#ifdef CONFIG_IP_NF_IP_ALIGNMENT
+	__be32 saddr, daddr;
+	u32_set(&saddr, &ip->saddr);
+	u32_set(&daddr, &ip->daddr);
+	if (FWINV((saddr&ipinfo->smsk.s_addr) != ipinfo->src.s_addr, IPT_INV_SRCIP)
+	    || FWINV((daddr&ipinfo->dmsk.s_addr) != ipinfo->dst.s_addr, IPT_INV_DSTIP))
+#else
 	if (FWINV((ip->saddr&ipinfo->smsk.s_addr) != ipinfo->src.s_addr,
 		  IPT_INV_SRCIP)
 	    || FWINV((ip->daddr&ipinfo->dmsk.s_addr) != ipinfo->dst.s_addr,
-		     IPT_INV_DSTIP)) {
+		     IPT_INV_DSTIP)) 
+#endif
+	{
 		dprintf("Source or dest mismatch.\n");
 
 		dprintf("SRC: %pI4. Mask: %pI4. Target: %pI4.%s\n",
diff -Nurp linux-2.6.31.orig/net/ipv4/netfilter/Kconfig linux-2.6.31/net/ipv4/netfilter/Kconfig
--- linux-2.6.31.orig/net/ipv4/netfilter/Kconfig	2011-11-28 16:51:32.000000000 +0800
+++ linux-2.6.31/net/ipv4/netfilter/Kconfig	2011-11-28 20:11:19.000000000 +0800
@@ -25,6 +25,13 @@ config NF_CONNTRACK_IPV4
 
 	  To compile it as a module, choose M here.  If unsure, say N.
 
+config IP_NF_IP_ALIGNMENT
+	bool "IP Header Alignment accessing"
+	---help---
+	  use 2 x 2 bytes set, instead of 4 bytes assignment directly.
+
+	  If unsure, say 'N'.
+
 config NF_CONNTRACK_PROC_COMPAT
 	bool "proc/sysctl compatibility with old connection tracking"
 	depends on NF_CONNTRACK_IPV4
diff -Nurp linux-2.6.31.orig/net/ipv4/netfilter/nf_nat_core.c linux-2.6.31/net/ipv4/netfilter/nf_nat_core.c
--- linux-2.6.31.orig/net/ipv4/netfilter/nf_nat_core.c	2011-11-28 16:51:32.000000000 +0800
+++ linux-2.6.31/net/ipv4/netfilter/nf_nat_core.c	2011-11-28 17:36:37.000000000 +0800
@@ -503,6 +503,19 @@ manip_pkt(u_int16_t proto,
 
 	iph = (void *)skb->data + iphdroff;
 
+#ifdef CONFIG_IP_NF_IP_ALIGNMENT
+	if (maniptype == IP_NAT_MANIP_SRC) {
+		__be32 saddr;
+		u32_set(&saddr, &iph->saddr);	
+		csum_replace4(&iph->check, saddr, target->src.u3.ip);
+		u32_set(&iph->saddr, &(target->src.u3.ip));
+	} else {
+		__be32 daddr;
+		u32_set(&daddr, &iph->daddr);	
+		csum_replace4(&iph->check, daddr, target->dst.u3.ip);
+		u32_set(&iph->daddr, &(target->dst.u3.ip));
+	}
+#else
 	if (maniptype == IP_NAT_MANIP_SRC) {
 		csum_replace4(&iph->check, iph->saddr, target->src.u3.ip);
 		iph->saddr = target->src.u3.ip;
@@ -510,6 +522,7 @@ manip_pkt(u_int16_t proto,
 		csum_replace4(&iph->check, iph->daddr, target->dst.u3.ip);
 		iph->daddr = target->dst.u3.ip;
 	}
+#endif
 	return true;
 }
 
diff -Nurp linux-2.6.31.orig/net/ipv4/netfilter/nf_nat_proto_tcp.c linux-2.6.31/net/ipv4/netfilter/nf_nat_proto_tcp.c
--- linux-2.6.31.orig/net/ipv4/netfilter/nf_nat_proto_tcp.c	2011-11-28 16:51:32.000000000 +0800
+++ linux-2.6.31/net/ipv4/netfilter/nf_nat_proto_tcp.c	2011-11-28 17:47:19.000000000 +0800
@@ -57,13 +57,21 @@ tcp_manip_pkt(struct sk_buff *skb,
 
 	if (maniptype == IP_NAT_MANIP_SRC) {
 		/* Get rid of src ip and src pt */
+#ifdef CONFIG_IP_NF_IP_ALIGNMENT
+		u32_set(&oldip, &iph->saddr);
+#else
 		oldip = iph->saddr;
+#endif
 		newip = tuple->src.u3.ip;
 		newport = tuple->src.u.tcp.port;
 		portptr = &hdr->source;
 	} else {
 		/* Get rid of dst ip and dst pt */
+#ifdef CONFIG_IP_NF_IP_ALIGNMENT
+		u32_set(&oldip, &iph->daddr);
+#else
 		oldip = iph->daddr;
+#endif
 		newip = tuple->dst.u3.ip;
 		newport = tuple->dst.u.tcp.port;
 		portptr = &hdr->dest;
diff -Nurp linux-2.6.31.orig/net/ipv4/netfilter/nf_nat_proto_udp.c linux-2.6.31/net/ipv4/netfilter/nf_nat_proto_udp.c
--- linux-2.6.31.orig/net/ipv4/netfilter/nf_nat_proto_udp.c	2011-11-28 16:51:32.000000000 +0800
+++ linux-2.6.31/net/ipv4/netfilter/nf_nat_proto_udp.c	2011-11-28 17:48:02.000000000 +0800
@@ -49,13 +49,21 @@ udp_manip_pkt(struct sk_buff *skb,
 
 	if (maniptype == IP_NAT_MANIP_SRC) {
 		/* Get rid of src ip and src pt */
+#ifdef CONFIG_IP_NF_IP_ALIGNMENT
+		u32_set(&oldip, &iph->saddr);
+#else
 		oldip = iph->saddr;
+#endif
 		newip = tuple->src.u3.ip;
 		newport = tuple->src.u.udp.port;
 		portptr = &hdr->source;
 	} else {
 		/* Get rid of dst ip and dst pt */
+#ifdef CONFIG_IP_NF_IP_ALIGNMENT
+		u32_set(&oldip, &iph->daddr);
+#else
 		oldip = iph->daddr;
+#endif
 		newip = tuple->dst.u3.ip;
 		newport = tuple->dst.u.udp.port;
 		portptr = &hdr->dest;
diff -Nurp linux-2.6.31.orig/net/ipv4/netfilter/nf_nat_standalone.c linux-2.6.31/net/ipv4/netfilter/nf_nat_standalone.c
--- linux-2.6.31.orig/net/ipv4/netfilter/nf_nat_standalone.c	2011-11-28 16:51:32.000000000 +0800
+++ linux-2.6.31/net/ipv4/netfilter/nf_nat_standalone.c	2011-11-28 18:05:44.000000000 +0800
@@ -177,11 +177,25 @@ nf_nat_in(unsigned int hooknum,
 	  int (*okfn)(struct sk_buff *))
 {
 	unsigned int ret;
+#ifdef CONFIG_IP_NF_IP_ALIGNMENT
+	__be32 daddr;
+	u32_set(&daddr, &(ip_hdr(skb)->daddr));
+#else
 	__be32 daddr = ip_hdr(skb)->daddr;
+#endif
 	ret = nf_nat_fn(hooknum, skb, in, out, okfn);
+#ifdef CONFIG_IP_NF_IP_ALIGNMENT
+	if (ret != NF_DROP && ret != NF_STOLEN) {
+		__be32 new_daddr;
+		u32_set(&new_daddr, &(ip_hdr(skb)->daddr));
+		if (daddr != new_daddr)
+			skb_dst_drop(skb);
+	}
+#else
 	if (ret != NF_DROP && ret != NF_STOLEN &&
 	    daddr != ip_hdr(skb)->daddr)
 		skb_dst_drop(skb);
+#endif
 
 	return ret;
 }
diff -Nurp linux-2.6.31.orig/net/ipv4/netfilter.c linux-2.6.31/net/ipv4/netfilter.c
--- linux-2.6.31.orig/net/ipv4/netfilter.c	2011-11-28 16:51:32.000000000 +0800
+++ linux-2.6.31/net/ipv4/netfilter.c	2011-11-28 19:00:20.000000000 +0800
@@ -20,7 +20,13 @@ int ip_route_me_harder(struct sk_buff *s
 	unsigned int hh_len;
 	unsigned int type;
 
+#ifdef CONFIG_IP_NF_IP_ALIGNMENT
+	__be32 saddr;
+	u32_set(&saddr, &iph->saddr);
+	type = inet_addr_type(net, saddr);
+#else
 	type = inet_addr_type(net, iph->saddr);
+#endif
 	if (skb->sk && inet_sk(skb->sk)->transparent)
 		type = RTN_LOCAL;
 	if (addr_type == RTN_UNSPEC)
diff -Nurp linux-2.6.31.orig/net/ipv4/udp.c linux-2.6.31/net/ipv4/udp.c
--- linux-2.6.31.orig/net/ipv4/udp.c	2011-11-28 16:51:32.000000000 +0800
+++ linux-2.6.31/net/ipv4/udp.c	2011-11-28 19:37:03.000000000 +0800
@@ -331,9 +331,21 @@ static inline struct sock *__udp4_lib_lo
 	if (unlikely(sk = skb_steal_sock(skb)))
 		return sk;
 	else
+#ifdef CONFIG_IP_NF_IP_ALIGNMENT
+	{
+		__be32 saddr, daddr;
+		u32_set(&saddr, &iph->saddr);
+		u32_set(&daddr, &iph->daddr);
+
+		return __udp4_lib_lookup(dev_net(skb_dst(skb)->dev), saddr, sport,
+					 daddr, dport, inet_iif(skb),
+					 udptable);
+	}
+#else
 		return __udp4_lib_lookup(dev_net(skb_dst(skb)->dev), iph->saddr, sport,
 					 iph->daddr, dport, inet_iif(skb),
 					 udptable);
+#endif
 }
 
 struct sock *udp4_lib_lookup(struct net *net, __be32 saddr, __be16 sport,
@@ -1217,9 +1229,19 @@ static inline int udp4_csum_init(struct 
 	if (uh->check == 0) {
 		skb->ip_summed = CHECKSUM_UNNECESSARY;
 	} else if (skb->ip_summed == CHECKSUM_COMPLETE) {
+#ifdef CONFIG_IP_NF_IP_ALIGNMENT
+	       __be32 saddr, daddr;
+	       u32_set(&saddr, &iph->saddr);
+	       u32_set(&daddr, &iph->daddr);
+
+	       if (!csum_tcpudp_magic(saddr, daddr, skb->len,
+				      proto, skb->csum))
+			skb->ip_summed = CHECKSUM_UNNECESSARY;
+#else
 	       if (!csum_tcpudp_magic(iph->saddr, iph->daddr, skb->len,
 				      proto, skb->csum))
 			skb->ip_summed = CHECKSUM_UNNECESSARY;
+#endif
 	}
 	if (!skb_csum_unnecessary(skb))
 		skb->csum = csum_tcpudp_nofold(iph->saddr, iph->daddr,
@@ -1301,8 +1323,13 @@ int __udp4_lib_rcv(struct sk_buff *skb, 
 	if (udp4_csum_init(skb, uh, proto))
 		goto csum_error;
 
+#ifdef CONFIG_IP_NF_IP_ALIGNMENT
+	u32_set(&saddr, &(ip_hdr(skb)->saddr));
+	u32_set(&daddr, &(ip_hdr(skb)->daddr));
+#else
 	saddr = ip_hdr(skb)->saddr;
 	daddr = ip_hdr(skb)->daddr;
+#endif
 
 	if (rt->rt_flags & (RTCF_BROADCAST|RTCF_MULTICAST))
 		return __udp4_lib_mcast_deliver(net, skb, uh,
