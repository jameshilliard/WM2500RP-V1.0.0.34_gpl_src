--- linux-2.6.31.org/net/ipv4/netfilter/ipt_DNATP2P.c	2013-08-21 13:04:32.000000000 +0800
+++ linux-2.6.31/net/ipv4/netfilter/ipt_DNATP2P.c	2013-08-21 13:29:54.000000000 +0800
@@ -30,6 +30,54 @@
  * http://3700.netgear.com, then we use the PC (192.168.1.3 or 192.168.1.2) to open
  * url and enter http://3700.netgear.com:6000 to access the service on 192.168.1.2.
  */
+#ifdef CONFIG_IP_NF_TARGET_DNAT_PORT_RANGE_ONE_BY_ONE
+static unsigned int ipt_dnatp2p_target(struct sk_buff *skb, const struct xt_target_param *par)
+{
+	struct nf_conn *ct;
+	enum ip_conntrack_info ctinfo;
+	const struct nf_nat_multi_range_compat *mr = par->targinfo;
+	const struct nf_nat_range *orig_range = &mr->range[0];
+	struct nf_nat_multi_range_compat tmp_mr;
+	struct nf_nat_multi_range_compat *tmp_mr_ptr;
+	/* Use host order for calculation */
+	u_int16_t add_num, new_port;
+
+	tmp_mr_ptr = &tmp_mr;
+	memcpy(tmp_mr_ptr, mr, sizeof(struct nf_nat_multi_range_compat));
+
+	NF_CT_ASSERT(hooknum == NF_INET_PRE_ROUTING);
+
+	ct = nf_ct_get(skb, &ctinfo);
+
+	/* Connection must be valid and new. */
+	NF_CT_ASSERT(ct && (ctinfo == IP_CT_NEW || ctinfo == IP_CT_RELATED));
+
+	if (orig_range->flags & IP_NAT_RANGE_PORT_RANGE_ONE_BY_ONE) {
+		/* Get original port, and calculate num added to make port correspond one by one */
+		add_num = ntohs(ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.u.all)
+				    - ntohs(orig_range->port_forwarding_external_starting_port);
+		new_port = ntohs(orig_range->min.all) + add_num;
+
+		tmp_mr_ptr->range[0].min.all = tmp_mr_ptr->range[0].max.all = htons(new_port);
+
+		if (net_ratelimit()) {
+			printk("[LAN access from remote] from %u.%u.%u.%u:%u to %u.%u.%u.%u:%u\n",
+				NIPQUAD(ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3),
+				ntohs(ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u.all),
+				NIPQUAD(orig_range->min_ip), new_port);
+		}
+	}
+
+	ct->status |= IPS_SNATP2P_DST;
+
+#if defined(CONFIG_NF_CONNTRACK_NAT_MANAGEMENT) || defined(CONFIG_NF_CONNTRACK_NAT_MANAGEMENT_MODULE)
+	/* The session is initiated from inside (LAN), it matches a
+	* Port Forwarding, or UPnP Port Mapping rule. -- [DNATP2P]*/
+	ct->status |= IPS_NAT_STATIC_HIGH_PRIORITY;
+#endif
+	return nf_nat_setup_info(ct, &tmp_mr_ptr->range[0], IP_NAT_MANIP_DST);
+}
+#else
 static unsigned int ipt_dnatp2p_target(struct sk_buff *skb, const struct xt_target_param *par)
 {
 	struct nf_conn *ct;
@@ -67,6 +115,7 @@
 
 	return nf_nat_setup_info(ct, &mr->range[0], IP_NAT_MANIP_DST);
 }
+#endif
 
 static bool ipt_dnatp2p_checkentry(const struct xt_tgchk_param *par)
 {
