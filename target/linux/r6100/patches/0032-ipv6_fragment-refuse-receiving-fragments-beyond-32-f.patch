From 4cbcd4dbfdcce4e8ba69a57990907d4d6ef2af69 Mon Sep 17 00:00:00 2001
From: guoxing.yang <guoxing.yang@dniserver.dnish.net>
Date: Wed, 11 May 2011 15:20:40 +0800
Subject: [PATCH 032/137] ipv6_fragment: refuse receiving fragments beyond 32 fragments in the next 90 seconds

Refuse receiving fragments beyond 32 fragments in the next 90 seconds.

In NETGEAR's SEPC,if an implementation has already received more than
32 fragments of an IPv6 packet,the implementation MUST discard these
32 fragments and also discard any fragment, belonging to the same IPv6
packet, received in the next 90 seconds.

Modify ipv6 fragment timeout time to 90 seconds when receive 32th fragment.
The fragment queue will still alive 90 seconds,and discard the fragment
come later.

DNI Common Module Patch Review Checklist
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Here are some basic things that I (Jonathan Chang) have checked
in order to ensure the quality of common modules.

1: The syntax and comment are compliant.

2: No memory leak.
   * memory allocated by malloc() will be freed
   * memory allocated by calloc() will be freed

3: No deadlock such as
   * No function call deadlock.
   * No semaphore deadlock.
   * No tag or label deadlock.

4: No stack overflow caused by
   * infinite recursion
   * too large local array variables

5: coding completeness, such as
   * conditions completeness
   * functions completeness
   * update completeness
   * memory resources completeness
   * sessions resources completeness
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Signed-off-by: guoxing.yang <guoxing.yang@dniserver.dnish.net>
Signed-off-by: Jonathan Chang <jonathan@dniserver.dnish.net>
---
 net/ipv6/reassembly.c |    3 +++
 1 files changed, 3 insertions(+), 0 deletions(-)

diff --git a/net/ipv6/reassembly.c b/net/ipv6/reassembly.c
index 05065f9..b850ce1 100644
--- a/net/ipv6/reassembly.c
+++ b/net/ipv6/reassembly.c
@@ -291,6 +291,9 @@ static int ip6_frag_queue(struct frag_queue *fq, struct sk_buff *skb,
 			goto err;
 		} else {
 			fq->fragment_count++;
+			if (fq->fragment_count == net->ipv6.frags.single_max) {
+				mod_timer(&fq->q.timer, jiffies + net->ipv6.frags.over_single_max_timeout) ;
+			}
 		}
 	}
 
-- 
1.7.4.1

