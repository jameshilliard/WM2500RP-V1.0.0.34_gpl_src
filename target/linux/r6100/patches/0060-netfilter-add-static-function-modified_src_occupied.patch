From 0acf2f68eb5276efa9d55fef0a2607c2894537d9 Mon Sep 17 00:00:00 2001
From: Haiyue.Wang <haiyue@dniserver.dnish.net>
Date: Tue, 16 Nov 2010 20:22:46 +0800
Subject: [PATCH 060/137] netfilter: add static function modified_src_occupied()

Modify the conntrack and nat modules to support SNATP2P

Patch as referring to bellowing link:
http://lists.netfilter.org/pipermail/netfilter-devel/2006-January/023084.html
http://lists.netfilter.org/pipermail/netfilter-devel/2006-March/023585.html

Signed-off-by: Haiyue.Wang <haiyue@dniserver.dnish.net>
Signed-off-by: Jonathan Chang <jonathan@dniserver.dnish.net>
---
 net/ipv4/netfilter/nf_nat_core.c |   30 ++++++++++++++++++++++++++++++
 1 files changed, 30 insertions(+), 0 deletions(-)

diff --git a/net/ipv4/netfilter/nf_nat_core.c b/net/ipv4/netfilter/nf_nat_core.c
index 07b6b28..82e9b7e 100644
--- a/net/ipv4/netfilter/nf_nat_core.c
+++ b/net/ipv4/netfilter/nf_nat_core.c
@@ -93,6 +93,9 @@ hash_by_src(const struct nf_conntrack_tuple *tuple)
 	return ((u64)hash * nf_nat_htable_size) >> 32;
 }
 
+static int modified_src_occupied(const struct nf_conntrack_tuple *tuple,
+				 const struct nf_conn *conntrack);
+
 /* Is this tuple already taken? (not by us) */
 int
 nf_nat_used_tuple(const struct nf_conntrack_tuple *tuple,
@@ -197,6 +200,33 @@ same_modified_src(const struct nf_conn *ct,
 		t->dst.u.all == tuple->src.u.all);
 }
 
+static int
+modified_src_occupied(const struct nf_conntrack_tuple *tuple,
+		      const struct nf_conn *conntrack)
+{
+	unsigned int h = hash_by_src(tuple);
+	struct net *net = nf_ct_net(conntrack);
+	const struct nf_conn_nat *nat;
+	const struct nf_conn *ct;
+	const struct hlist_node *n;
+
+	rcu_read_lock();
+	hlist_for_each_entry_rcu(nat, n, &net->ipv4.nat_by_modified_source[h], by_modified_source) {
+		ct = nat->ct;
+		if (same_modified_src(ct, tuple)) {
+			if (same_src(ct, &conntrack->tuplehash[IP_CT_DIR_ORIGINAL].tuple))
+				/*that's an appropriate source*/
+				continue;
+
+			rcu_read_unlock();
+			return 1;
+		}
+	}
+	rcu_read_unlock();
+
+	return 0;
+}
+
 /* For [FUTURE] fragmentation handling, we want the least-used
    src-ip/dst-ip/proto triple.  Fairness doesn't come into it.  Thus
    if the range specifies 1.2.3.4 ports 10000-10005 and 1.2.3.5 ports
-- 
1.7.4.1

