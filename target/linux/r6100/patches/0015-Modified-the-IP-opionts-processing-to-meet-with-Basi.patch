From 09c5917c61df4756c23310f88208a0fd13d443dc Mon Sep 17 00:00:00 2001
From: Haiyue.Wang <haiyue@dniserver.dnish.net>
Date: Fri, 3 Dec 2010 19:03:16 +0800
Subject: [PATCH 015/137] Modified the IP opionts processing, to meet with Basic NAT spec

For IP options Record Route (7), Strict Source Route (9), and Loose Source Route (3),
an implementation SHOULD let the options pass through without changing anything.

DNI Common Module Patch Review Checklist
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Here are some basic things that I (Jonathan Chang) have checked
in order to ensure the quality of common modules.

1: The syntax and comment are compliant.

2: No memory leak.
   * memory allocated by malloc() will be freed
   * memory allocated by calloc() will be freed

3: No deadlock such as
   * No function call deadlock.
   * No semaphore deadlock.
   * No tag or label deadlock.

4: No stack overflow caused by
   * infinite recursion
   * too large local array variables

5: coding completeness, such as
   * conditions completeness
   * functions completeness
   * update completeness
   * memory resources completeness
   * sessions resources completeness
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Signed-off-by: Haiyue.Wang <haiyue@dniserver.dnish.net>
Signed-off-by: Jonathan Chang <jonathan@dniserver.dnish.net>
---
 net/ipv4/Kconfig      |    8 ++++++++
 net/ipv4/ip_options.c |   36 ++++++++++++++++++++++++++++++++++++
 2 files changed, 44 insertions(+), 0 deletions(-)

diff --git a/net/ipv4/Kconfig b/net/ipv4/Kconfig
index 77d2208..08814f7 100644
--- a/net/ipv4/Kconfig
+++ b/net/ipv4/Kconfig
@@ -285,6 +285,14 @@ config IP_PIMSM_V2
 	  gated-5). This routing protocol is not used widely, so say N unless
 	  you want to play with it.
 
+
+config IP_NF_CT_ROUTE
+	bool "IP Route option wihtout SNAT"
+	default y
+	help
+	  For IP options Record Route (7), Strict Source Route (9), and Loose Source Route (3),
+	  an implementation SHOULD let the options pass through without changing anything.
+
 config ARPD
 	bool "IP: ARP daemon support (EXPERIMENTAL)"
 	depends on EXPERIMENTAL
diff --git a/net/ipv4/ip_options.c b/net/ipv4/ip_options.c
index 2c88da6..6f1bc8f 100644
--- a/net/ipv4/ip_options.c
+++ b/net/ipv4/ip_options.c
@@ -286,6 +286,25 @@ int ip_options_compile(struct net *net,
 		switch (*optptr) {
 		      case IPOPT_SSRR:
 		      case IPOPT_LSRR:
+#ifdef CONFIG_IP_NF_CT_ROUTE
+			/*
+			 *  NETGEAR Home Wireless Router Engineer Spec v1.6
+			 *  1.1 Basic NAT
+			 *    2. For IP options Record Route (7), Strict Source Route (9), and Loose Source Route (3),
+			 *  an implementation SHOULD let the options pass through without changing anything.
+			 */
+
+			/* if (net_ratelimit())
+				printk("Found a %s Source Route IP options, pass through!\n",
+					*optptr == IPOPT_SSRR ? "Strict" : "Loose"); */
+			/*
+			 * Reset the values, so `ip_options_rcv_srr` and `ip_forward_options` will NOT process it;
+			 * The IP packet is still with some other options ?
+			 */
+			memset(opt, 0, sizeof(struct ip_options));
+
+			return 0;
+#endif
 			if (optlen < 3) {
 				pp_ptr = optptr + 1;
 				goto error;
@@ -312,6 +331,23 @@ int ip_options_compile(struct net *net,
 			opt->srr = optptr - iph;
 			break;
 		      case IPOPT_RR:
+#ifdef CONFIG_IP_NF_CT_ROUTE
+			/*
+			 *  NETGEAR Home Wireless Router Engineer Spec v1.6
+			 *  1.1 Basic NAT
+			 *    2. For IP options Record Route (7), Strict Source Route (9), and Loose Source Route (3),
+			 *  an implementation SHOULD let the options pass through without changing anything.
+			 */
+			/* if (net_ratelimit())
+				printk("Found a Record Route IP options, pass through!\n"); */
+			/*
+			 * Reset the values, so `ip_forward_options` will NOT process it; The IP packet is still with
+			 * some other options ?
+			 */
+			memset(opt, 0, sizeof(struct ip_options));
+
+			return 0;
+#endif
 			if (opt->rr) {
 				pp_ptr = optptr;
 				goto error;
-- 
1.7.4.1

