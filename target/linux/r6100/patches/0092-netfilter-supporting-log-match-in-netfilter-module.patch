From f127dda2e9f633d3e5afbaeb1fa92c5e8a4dad29 Mon Sep 17 00:00:00 2001
From: Haiyue.Wang <haiyue@dniserver.dnish.net>
Date: Wed, 24 Nov 2010 10:53:14 +0800
Subject: [PATCH 092/137] netfilter: supporting log match in netfilter module

This module is used by DNI's net-wall for logging packets according to
NETGEAR spec. And we are the last match in the netfilter rules to
reduce the number of rules.

Signed-off-by: Haiyue.Wang <haiyue@dniserver.dnish.net>
Signed-off-by: Jonathan Chang <jonathan@dniserver.dnish.net>
---
 net/ipv4/netfilter/Kconfig   |    9 ++++
 net/ipv4/netfilter/Makefile  |    1 +
 net/ipv4/netfilter/ipt_log.c |  106 ++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 116 insertions(+), 0 deletions(-)
 create mode 100644 net/ipv4/netfilter/ipt_log.c

diff --git a/net/ipv4/netfilter/Kconfig b/net/ipv4/netfilter/Kconfig
index 8a8b252..acc6107 100644
--- a/net/ipv4/netfilter/Kconfig
+++ b/net/ipv4/netfilter/Kconfig
@@ -101,6 +101,15 @@ config IP_NF_MATCH_TTL
 	(e.g. when running oldconfig). It selects
 	CONFIG_NETFILTER_XT_MATCH_HL.
 
+config IP_NF_MATCH_LOG
+	 tristate "log match support"
+	 depends on IP_NF_IPTABLES
+	 help
+	   This option adds a 'log' match, which allows you to record
+	   some info of the packet header to the syslog.
+
+	   To compile it as a module, choose M here.  If unsure, say N.
+
 # `filter', generic and specific targets
 config IP_NF_FILTER
 	tristate "Packet filtering"
diff --git a/net/ipv4/netfilter/Makefile b/net/ipv4/netfilter/Makefile
index b6be526..85fc946 100644
--- a/net/ipv4/netfilter/Makefile
+++ b/net/ipv4/netfilter/Makefile
@@ -51,6 +51,7 @@ obj-$(CONFIG_IP_NF_SECURITY) += iptable_security.o
 obj-$(CONFIG_IP_NF_MATCH_ADDRTYPE) += ipt_addrtype.o
 obj-$(CONFIG_IP_NF_MATCH_AH) += ipt_ah.o
 obj-$(CONFIG_IP_NF_MATCH_ECN) += ipt_ecn.o
+obj-$(CONFIG_IP_NF_MATCH_LOG) += ipt_log.o
 
 # targets
 obj-$(CONFIG_IP_NF_TARGET_CLUSTERIP) += ipt_CLUSTERIP.o
diff --git a/net/ipv4/netfilter/ipt_log.c b/net/ipv4/netfilter/ipt_log.c
new file mode 100644
index 0000000..fcfe74a
--- /dev/null
+++ b/net/ipv4/netfilter/ipt_log.c
@@ -0,0 +1,106 @@
+/*
+ * Copyright (C) 2007-2010 Delta Networks Inc.
+ * This module is used by DNI's net-wall for logging packets according to NETGEAR spec.
+ * And we are the last match in the netfilter rules to reduce the number of rules.
+ */
+#include <linux/module.h>
+#include <linux/skbuff.h>
+#include <linux/spinlock.h>
+#include <linux/ip.h>
+#include <net/udp.h>
+#include <net/tcp.h>
+
+#include <linux/netfilter/x_tables.h>
+#include <linux/netfilter_ipv4/ip_tables.h>
+
+#if 0
+#define DEBUGP printk
+#else
+#define DEBUGP(format, args...)
+#endif
+
+
+/*******************************************************************/
+
+#define LOG_PORT	0x0001
+#define LOG_SPORT	0x0002	/* we only care the source port */
+
+struct ipt_logs_info {
+	unsigned short flags;
+
+	char prefix[62];
+	char destip[32]; /* Local IP-Address --> DestIP:Port */
+};
+
+
+/*******************************************************************/
+
+static bool ipt_log_match(const struct sk_buff *skb, const struct xt_match_param *par)
+{
+	int has_port;
+	struct iphdr *iph;
+	struct tcphdr *tcph;
+	const struct ipt_logs_info *loginfo;
+
+	if (net_ratelimit() == 0)
+		return true;
+
+	iph = ip_hdr(skb);
+	tcph = (void *)iph + (iph->ihl << 2);	/* Might be TCP, UDP */
+	loginfo = par->matchinfo;
+
+	has_port = (iph->protocol == IPPROTO_TCP || iph->protocol == IPPROTO_UDP);
+
+	if (has_port && (loginfo->flags & LOG_SPORT))
+		printk("[%s] from source: %u.%u.%u.%u, port %u,\n", loginfo->prefix, 
+				NIPQUAD(iph->saddr), ntohs(tcph->source));
+	else if (has_port && (loginfo->flags & LOG_PORT))
+		printk("[%s] from %u.%u.%u.%u:%u to %s:%u,\n", loginfo->prefix, NIPQUAD(iph->saddr), 
+				ntohs(tcph->source), loginfo->destip, ntohs(tcph->dest));
+	else
+		printk("[%s] from source %u.%u.%u.%u,\n", loginfo->prefix, NIPQUAD(iph->saddr));
+
+	return true;
+}
+
+static bool ipt_log_checkentry(const struct xt_mtchk_param *par)
+{
+	const struct ipt_logs_info *loginfo = par->matchinfo;
+
+
+	if (loginfo->prefix[sizeof(loginfo->prefix)-1] != '\0') {
+		DEBUGP("log: prefix term %i\n", loginfo->prefix[sizeof(loginfo->prefix)-1]);
+		return false;
+	}
+
+	return true;
+}
+
+static struct xt_match log_match = {
+	.name		= "log",
+	.family		= NFPROTO_IPV4,
+	.matchsize	= sizeof(struct ipt_logs_info), 	
+	.match		= ipt_log_match,
+	.checkentry	= ipt_log_checkentry,
+	.me		= THIS_MODULE,
+};
+
+static int __init init(void)
+{
+	if (xt_register_match(&log_match))
+		return -EINVAL;
+
+	return 0;
+}
+
+static void __exit fini(void)
+{
+	xt_unregister_match(&log_match);
+}
+
+module_init(init);
+module_exit(fini);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("");
+MODULE_DESCRIPTION("Firewall and NAT");
-- 
1.7.4.1

