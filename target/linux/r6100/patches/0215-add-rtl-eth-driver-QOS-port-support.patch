diff -Nur linux-2.6.30.old//drivers/net/rtl819x/Kconfig linux-2.6.30/drivers/net/rtl819x/Kconfig
--- linux-2.6.30.old//drivers/net/rtl819x/Kconfig	2012-12-06 11:05:47.187989955 -0500
+++ linux-2.6.30/drivers/net/rtl819x/Kconfig	2012-12-06 11:06:45.067989948 -0500
@@ -430,6 +430,11 @@
 	default n
 	depends on RTL_819X
 
+config DNI_QOS_LPORT
+       bool "Enable DNI QoS LAN Ports feature"
+       default n
+       depends on RTL_819X
+
 config RTL_REINIT_SWITCH_CORE
 	bool
 	default y
diff -Nur linux-2.6.30.old//drivers/net/rtl819x/rtl_nic.c linux-2.6.30/drivers/net/rtl819x/rtl_nic.c
--- linux-2.6.30.old//drivers/net/rtl819x/rtl_nic.c	2012-12-06 11:05:47.187989955 -0500
+++ linux-2.6.30/drivers/net/rtl819x/rtl_nic.c	2012-12-06 11:16:01.707989883 -0500
@@ -267,6 +267,33 @@
 static int32 get_all_port_info(struct ifreq *rq);
 #endif
 
+#if defined (CONFIG_DNI_QOS_LPORT)
+/* LAN port */
+enum {
+       LP_MIN = 0,
+       LP_1,
+       LP_2,
+       LP_3,
+       LP_4,
+       LP_MAX
+};
+
+/* priority */
+enum {
+       P_MIN = 0,
+       P_HIGHEST = 0x1 << 0,
+       P_HIGH = 0x1 << 1,
+       P_NORMAL = 0x1 << 2,
+       P_LOW = 0x1 << 3,
+       P_MAX = P_LOW + 1
+};
+/* lp_prio[0] : unused; lp_prio[i] (i=1~4): priority of the i'th LAN port. */
+static u32 lp_prio[5] = {P_MIN, P_MIN, P_MIN, P_MIN, P_MIN};
+
+void dni_qos_mark_port_prio(struct sk_buff *skb, int port);
+static int32 lan_prio_read(char *page, char **start, off_t off, int count, int *eof, void *data);
+static int32 lan_prio_write( struct file *filp, const char *buff,unsigned long len, void *data);
+#endif //#if defined (CONFIG_DNI_QOS_LPORT)
 
 #ifdef CONFIG_RTL8196C_GREEN_ETHERNET
 static void power_save_timer(unsigned long task_priv);
@@ -2947,6 +2974,11 @@
 {
 	skb->protocol = eth_type_trans(skb, skb->dev);
 	skb->ip_summed = CHECKSUM_NONE;
+
+#if defined(CONFIG_DNI_QOS_LPORT)
+	dni_qos_mark_port_prio(skb, skb->srcPhyPort + 1);
+#endif
+
 	//printk("[%s][%d]-skb->dev[%s],proto(0x%x)\n", __FUNCTION__, __LINE__, skb->dev->name,skb->protocol);
 
 #if defined(RX_TASKLET)
@@ -3033,7 +3065,7 @@
 #endif
 
 
-#if defined(CONFIG_NETFILTER_XT_MATCH_PHYPORT) || defined(CONFIG_RTL_FAST_FILTER) || defined(CONFIG_RTL_QOS_PATCH) || defined(CONFIG_RTK_VOIP_QOS) || defined(CONFIG_RTK_VLAN_WAN_TAG_SUPPORT) ||defined(CONFIG_RTL_MAC_FILTER_CARE_INPORT)
+#if defined(CONFIG_DNI_QOS_LPORT) || defined(CONFIG_NETFILTER_XT_MATCH_PHYPORT) || defined(CONFIG_RTL_FAST_FILTER) || defined(CONFIG_RTL_QOS_PATCH) || defined(CONFIG_RTK_VOIP_QOS) || defined(CONFIG_RTK_VLAN_WAN_TAG_SUPPORT) ||defined(CONFIG_RTL_MAC_FILTER_CARE_INPORT)
 	skb->srcPhyPort=(uint8)pid;
 #endif
 	//printk("=======%s(%d),cp_this(%s)\n",__FUNCTION__,__LINE__,cp_this->dev->name);
@@ -6593,6 +6625,10 @@
 #endif	//#if defined(CONFIG_819X_PHY_RW)
 #endif
 
+#if defined (CONFIG_DNI_QOS_LPORT)
+       struct proc_dir_entry *lport_pri;
+#endif //#if defined (CONFIG_DNI_QOS_LPORT)
+
 #if defined(CONFIG_RTL_HW_VLAN_SUPPORT)
 	struct proc_dir_entry *rtl_hw_vlan_support_entry;
 	struct proc_dir_entry *rtl_hw_vlan_tagged_bridge_multicast_entry;
@@ -7128,6 +7164,15 @@
 	}
 #endif	//#if defined(CONFIG_819X_PHY_RW)
 
+#if defined (CONFIG_DNI_QOS_LPORT)
+       lport_pri = create_proc_entry("lan_prio", 0, NULL);
+       if (lport_pri)
+       {
+               lport_pri->read_proc = lan_prio_read;
+               lport_pri->write_proc = lan_prio_write;
+       }
+#endif //#if defined (CONFIG_DNI_QOS_LPORT)
+
 #ifdef RTL8367r_PHY_RESET
 	switch_phy_init();
 #endif
@@ -9486,6 +9531,46 @@
 
 #endif	//#if defined(CONFIG_819X_PHY_RW)
 
+#if defined (CONFIG_DNI_QOS_LPORT)
+void dni_qos_mark_port_prio(struct sk_buff *skb, int port)
+{
+       if (port > LP_MIN && port < LP_MAX)
+               skb->mark = lp_prio[port];
+}
+
+static int32 lan_prio_read(char *page, char **start, off_t off, int count, int *eof, void *data)
+{
+       int len;
+       len = sprintf(page, "%d%d%d%d%d", lp_prio[0], lp_prio[1],
+                               lp_prio[2], lp_prio[3], lp_prio[4]);
+       if (len <= off+count)
+               *eof = 1;
+       *start = page + off;
+       len -= off;
+       if (len>count)
+               len = count;
+       if (len<0)
+               len = 0;
+       return len;
+}
+
+static int32 lan_prio_write( struct file *filp, const char *buff,unsigned long len, void *data )
+{
+       char tmpbuf[4];
+       int port, prio;
+
+       if (buff && !copy_from_user(tmpbuf, buff, len))
+       {
+               port = (int)(tmpbuf[0] - '0');
+               prio = (int)(tmpbuf[1] - '0');
+
+               if ((port > LP_MIN && port < LP_MAX) &&
+                       (prio >= P_MIN && prio < P_MAX))
+                       lp_prio[port] = prio;
+       }
+       return len;
+}
+#endif //#if defined (CONFIG_DNI_QOS_LPORT)
 
 static int read_proc_vlan(char *page, char **start, off_t off,
         int count, int *eof, void *data)
