From 61b76e9540f107039e01cb2625b96598563946f6 Mon Sep 17 00:00:00 2001
From: Haiyue.Wang <haiyue@dniserver.dnish.net>
Date: Fri, 3 Dec 2010 21:20:28 +0800
Subject: [PATCH 102/137] netfilter: add some code to create /proc/net/ip_conntrack_scan

Export the TCP/UDP public-Port/private-IP information for common module net-web using

Create '/proc/net/ip_conntrack_scan' and format the information as bellowing:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Protocol	Public-Port	Private-IP
UDP		123		192.168.1.12
TCP		2928		192.168.1.12
UDP		65500		192.168.1.12
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

DNI Common Module Patch Review Checklist
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Here are some basic things that I (Jonathan Chang) have checked
in order to ensure the quality of common modules.

1: The syntax and comment are compliant.

2: No memory leak.
   * memory allocated by malloc() will be freed
   * memory allocated by calloc() will be freed

3: No deadlock such as
   * No function call deadlock.
   * No semaphore deadlock.
   * No tag or label deadlock.

4: No stack overflow caused by
   * infinite recursion
   * too large local array variables

5: coding completeness, such as
   * conditions completeness
   * functions completeness
   * update completeness
   * memory resources completeness
   * sessions resources completeness
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Signed-off-by: Haiyue.Wang <haiyue@dniserver.dnish.net>
Signed-off-by: Jonathan Chang <jonathan@dniserver.dnish.net>
---
 net/netfilter/nf_conntrack_standalone.c |   96 +++++++++++++++++++++++++++++++
 1 files changed, 96 insertions(+), 0 deletions(-)

diff --git a/net/netfilter/nf_conntrack_standalone.c b/net/netfilter/nf_conntrack_standalone.c
index abfc812..36f0cd1 100644
--- a/net/netfilter/nf_conntrack_standalone.c
+++ b/net/netfilter/nf_conntrack_standalone.c
@@ -190,6 +190,9 @@ static int ct_seq_show(struct seq_file *s, void *v)
 		goto release;
 #endif
 
+	if (seq_printf(s, (ct->status & IPS_NAT_MASK) ? "[NATed] " : "[Local] "))
+		goto release;
+
 	if (seq_printf(s, "use=%u\n", atomic_read(&ct->ct_general.use)))
 		goto release;
 
@@ -206,6 +209,93 @@ static const struct seq_operations ct_seq_ops = {
 	.show  = ct_seq_show
 };
 
+/* show `public TCP/UDP port' and `private IP' are used by an existing NAPT mapping */
+static int internet_seq_show(struct seq_file *s, void *v)
+{
+	char *proto;
+	__u16 pub_port;
+	__u32 pri_ipaddr;
+
+	struct nf_conn *ct;
+	struct nf_conntrack_tuple *otuple;
+	struct nf_conntrack_tuple *rtuple;
+	struct nf_conntrack_tuple_hash *hash = v;
+
+	if (NF_CT_DIRECTION(hash) != IP_CT_DIR_ORIGINAL)
+		return 0;
+
+	ct = nf_ct_tuplehash_to_ctrack(hash);
+	if (!(ct->status & IPS_NAT_MASK))
+		return 0;
+
+	otuple = &hash->tuple;
+	if (otuple->dst.protonum == IPPROTO_TCP)
+		proto = "TCP";
+	else if (otuple->dst.protonum == IPPROTO_UDP)
+		proto = "UDP";
+	else
+		return 0;
+
+	rtuple = &ct->tuplehash[IP_CT_DIR_REPLY].tuple;
+
+	if (ct->status & IPS_SRC_NAT) {
+		/*
+		 * LAN -> [ Router ] -> WAN
+		 * O: src={@10.0.0.2@} dst=219.229.115.188 sport=1930 dport=7360 ...
+		 * R: src=219.229.115.188 dst=218.81.136.62 sport=7360 dport={@49786@} ...
+		 */
+		pub_port = rtuple->dst.u.all;
+		pri_ipaddr = otuple->src.u3.ip;
+	} else {
+		/*
+		 * For `REDIRECT` target on `NF_IP_PRE_ROUTING`, It also do 'IPS_DST_NAT' to
+		 * change its destination port, NOT include destination IP address:
+		 *
+		 * tcp 6 88 TIME_WAIT
+		 * O: src=172.17.145.45 dst={@172.17.144.103@} sport=3622 dport=3333
+		 * R: src={@172.17.144.103@} dst=172.17.145.45 sport=80 dport=3622 ... [NATed] ...
+		 *
+		 * This conntrack is not be treated as an Internet session.
+		 */
+		if (otuple->dst.u3.ip == rtuple->src.u3.ip)
+			return 0;
+
+		/*
+		 * WAN -> [ Router ] -> LAN
+		 * O: src=117.101.128.148 dst=218.81.136.62 sport=20575 dport={@6666@} ...
+		 * R: src={@10.0.0.2@} dst=117.101.128.148 sport=1930 dport=20575 ...
+		 */
+		pub_port = otuple->dst.u.all;
+		pri_ipaddr = rtuple->src.u3.ip;
+	}
+
+	return seq_printf(s, "%s %hu %u.%u.%u.%u\n",
+			proto,
+			ntohs(pub_port),
+			NIPQUAD(pri_ipaddr)) ? -ENOSPC : 0;
+}
+
+static struct seq_operations internet_seq_ops = {
+	.start  = ct_seq_start,
+	.next   = ct_seq_next,
+	.stop   = ct_seq_stop,
+	.show   = internet_seq_show
+};
+
+static int internet_open(struct inode *inode, struct file *file)
+{
+	return seq_open_net(inode, file, &internet_seq_ops,
+			sizeof(struct ct_iter_state));
+}
+
+static struct file_operations internet_file_ops = {
+	.owner  = THIS_MODULE,
+	.open   = internet_open,
+	.read   = seq_read,
+	.llseek = seq_lseek,
+	.release= seq_release_private
+};
+
 static int ct_open(struct inode *inode, struct file *file)
 {
 	return seq_open_net(inode, file, &ct_seq_ops,
@@ -324,6 +414,11 @@ static int nf_conntrack_standalone_init_proc(struct net *net)
 			  &ct_cpu_seq_fops);
 	if (!pde)
 		goto out_stat_nf_conntrack;
+
+	pde = proc_net_fops_create(net, "ip_conntrack_scan", 0440, &internet_file_ops);
+	if (!pde)
+		printk(KERN_WARNING "ip_conntrack: can't create ip_conntrack_scan.\n");
+
 	return 0;
 
 out_stat_nf_conntrack:
@@ -336,6 +431,7 @@ static void nf_conntrack_standalone_fini_proc(struct net *net)
 {
 	remove_proc_entry("nf_conntrack", net->proc_net_stat);
 	proc_net_remove(net, "nf_conntrack");
+	proc_net_remove(net, "ip_conntrack_scan");
 }
 #else
 static int nf_conntrack_standalone_init_proc(struct net *net)
-- 
1.7.4.1

