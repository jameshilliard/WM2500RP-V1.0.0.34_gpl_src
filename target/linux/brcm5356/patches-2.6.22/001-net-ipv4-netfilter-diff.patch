diff --git a/net/ipv4/netfilter/Kconfig b/net/ipv4/netfilter/Kconfig
index 7507c94..06bb3ed 100644
--- a/net/ipv4/netfilter/Kconfig
+++ b/net/ipv4/netfilter/Kconfig
@@ -320,6 +320,11 @@ config NF_NAT_H323
 	depends on IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT
 	default NF_NAT && NF_CONNTRACK_H323
 
+config NF_NAT_AUTOFW
+	tristate
+	depends on IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT
+	default NF_NAT
+
 config NF_NAT_SIP
 	tristate
 	depends on IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT
diff --git a/net/ipv4/netfilter/Makefile b/net/ipv4/netfilter/Makefile
index efc8d1a..d98a74c 100644
--- a/net/ipv4/netfilter/Makefile
+++ b/net/ipv4/netfilter/Makefile
@@ -11,7 +11,7 @@ endif
 endif
 
 nf_nat-objs		:= nf_nat_core.o nf_nat_helper.o nf_nat_proto_unknown.o nf_nat_proto_tcp.o nf_nat_proto_udp.o nf_nat_proto_icmp.o
-iptable_nat-objs	:= nf_nat_rule.o nf_nat_standalone.o
+iptable_nat-objs	:= nf_nat_rule.o nf_nat_standalone.o ipt_cone.o
 
 # connection tracking
 obj-$(CONFIG_NF_CONNTRACK_IPV4) += nf_conntrack_ipv4.o
@@ -27,6 +27,7 @@ obj-$(CONFIG_NF_NAT_PPTP) += nf_nat_pptp.o
 obj-$(CONFIG_NF_NAT_SIP) += nf_nat_sip.o
 obj-$(CONFIG_NF_NAT_SNMP_BASIC) += nf_nat_snmp_basic.o
 obj-$(CONFIG_NF_NAT_TFTP) += nf_nat_tftp.o
+obj-$(CONFIG_NF_NAT_AUTOFW) += nf_nat_autofw.o
 
 # NAT protocols (nf_nat)
 obj-$(CONFIG_NF_NAT_PROTO_GRE) += nf_nat_proto_gre.o
@@ -75,4 +76,3 @@ obj-$(CONFIG_IP_NF_ARP_MANGLE) += arpt_mangle.o
 obj-$(CONFIG_IP_NF_ARPFILTER) += arptable_filter.o
 
 obj-$(CONFIG_IP_NF_QUEUE) += ip_queue.o
-
diff --git a/net/ipv4/netfilter/ip_tables.c b/net/ipv4/netfilter/ip_tables.c
index 9bacf1a0..15ba28e 100644
--- a/net/ipv4/netfilter/ip_tables.c
+++ b/net/ipv4/netfilter/ip_tables.c
@@ -58,11 +58,11 @@ do {								\
 #define IP_NF_ASSERT(x)
 #endif
 
-#if 0
-/* All the better to debug you with... */
-#define static
-#define inline
-#endif
+
+unsigned int
+ipt_cone_target(struct sk_buff **pskb, unsigned int hooknum,
+	const struct net_device *in, const struct net_device *out,
+	const struct xt_target *target, const void *targinfo);
 
 /*
    We keep a set of rules for each CPU, so we can avoid write-locking
@@ -249,6 +249,7 @@ ipt_do_table(struct sk_buff **pskb,
 	do {
 		IP_NF_ASSERT(e);
 		IP_NF_ASSERT(back);
+		(*pskb)->nfcache |= e->nfcache;
 		if (ip_packet_match(ip, indev, outdev, &e->ip, offset)) {
 			struct ipt_entry_target *t;
 
@@ -270,6 +271,13 @@ ipt_do_table(struct sk_buff **pskb,
 					/* Pop from stack? */
 					if (v != IPT_RETURN) {
 						verdict = (unsigned)(-v) - 1;
+
+						if (ipt_cone_target(pskb, hook, in, out,
+							t->u.kernel.target,
+							t->data) == NF_ACCEPT) {
+							/* Accept cone target as default */
+							verdict = NF_ACCEPT;
+						}
 						break;
 					}
 					e = back;
@@ -647,8 +655,6 @@ check_entry_size_and_hooks(struct ipt_entry *e,
 			newinfo->underflow[h] = underflows[h];
 	}
 
-	/* FIXME: underflows must be unconditional, standard verdicts
-	   < 0 (not IPT_RETURN). --RR */
 
 	/* Clear counters and comefrom */
 	e->counters = ((struct xt_counters) { 0, 0 });
@@ -864,7 +870,6 @@ copy_entries_to_user(unsigned int total_size,
 		goto free_counters;
 	}
 
-	/* FIXME: use iterator macros --RR */
 	/* ... then go back and fix counters and names */
 	for (off = 0, num = 0; off < total_size; off += e->next_offset, num++){
 		unsigned int i;
@@ -1273,14 +1278,6 @@ add_counter_to_entry(struct ipt_entry *e,
 		     const struct xt_counters addme[],
 		     unsigned int *i)
 {
-#if 0
-	duprintf("add_counter: Entry %u %lu/%lu + %lu/%lu\n",
-		 *i,
-		 (long unsigned int)e->counters.pcnt,
-		 (long unsigned int)e->counters.bcnt,
-		 (long unsigned int)addme[*i].pcnt,
-		 (long unsigned int)addme[*i].bcnt);
-#endif
 
 	ADD_COUNTER(e->counters, addme[*i].bcnt, addme[*i].pcnt);
 
diff --git a/net/ipv4/netfilter/ipt_CLUSTERIP.c b/net/ipv4/netfilter/ipt_CLUSTERIP.c
index 40e2734..591e4ee 100644
--- a/net/ipv4/netfilter/ipt_CLUSTERIP.c
+++ b/net/ipv4/netfilter/ipt_CLUSTERIP.c
@@ -318,9 +318,6 @@ target(struct sk_buff **pskb,
 	ct = nf_ct_get(*pskb, &ctinfo);
 	if (ct == NULL) {
 		printk(KERN_ERR "CLUSTERIP: no conntrack!\n");
-			/* FIXME: need to drop invalid ones, since replies
-			 * to outgoing connections of other nodes will be
-			 * marked as INVALID */
 		return NF_DROP;
 	}
 
@@ -343,9 +340,6 @@ target(struct sk_buff **pskb,
 			break;
 		case IP_CT_RELATED:
 		case IP_CT_RELATED+IP_CT_IS_REPLY:
-			/* FIXME: we don't handle expectations at the
-			 * moment.  they can arrive on a different node than
-			 * the master connection (e.g. FTP passive mode) */
 		case IP_CT_ESTABLISHED:
 		case IP_CT_ESTABLISHED+IP_CT_IS_REPLY:
 			break;
@@ -396,7 +390,6 @@ checkentry(const char *tablename,
 		return 0;
 	}
 
-	/* FIXME: further sanity checks */
 
 	config = clusterip_config_find_get(e->ip.dst.s_addr, 1);
 	if (config) {
@@ -594,7 +587,6 @@ static void *clusterip_seq_start(struct seq_file *s, loff_t *pos)
 	u_int32_t local_nodes;
 	struct clusterip_seq_position *idx;
 
-	/* FIXME: possible race */
 	local_nodes = c->local_nodes;
 	weight = hweight32(local_nodes);
 	if (*pos >= weight)
diff --git a/net/ipv4/netfilter/ipt_MASQUERADE.c b/net/ipv4/netfilter/ipt_MASQUERADE.c
index d4f2d77..21cdcd8 100644
--- a/net/ipv4/netfilter/ipt_MASQUERADE.c
+++ b/net/ipv4/netfilter/ipt_MASQUERADE.c
@@ -22,21 +22,17 @@
 #include <net/netfilter/nf_nat_rule.h>
 #include <linux/netfilter_ipv4.h>
 #include <linux/netfilter/x_tables.h>
+#include <linux/netfilter_ipv4.h>
 
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Netfilter Core Team <coreteam@netfilter.org>");
 MODULE_DESCRIPTION("iptables MASQUERADE target module");
 
-#if 0
-#define DEBUGP printk
-#else
 #define DEBUGP(format, args...)
-#endif
 
 /* Lock protects masq region inside conntrack */
 static DEFINE_RWLOCK(masq_lock);
 
-/* FIXME: Multiple targets. --RR */
 static int
 masquerade_check(const char *tablename,
 		 const void *e,
@@ -81,6 +77,9 @@ masquerade_target(struct sk_buff **pskb,
 	NF_CT_ASSERT(ct && (ctinfo == IP_CT_NEW || ctinfo == IP_CT_RELATED
 			    || ctinfo == IP_CT_RELATED + IP_CT_IS_REPLY));
 
+	/* Mark the connection as cone if we have such rule configured */
+	nat->info.nat_type |= ((*pskb)->nfcache & NFC_IP_CONE_NAT) ? NFC_IP_CONE_NAT:0;
+
 	/* Source address is 0.0.0.0 - locally generated packet that is
 	 * probably not supposed to be masqueraded.
 	 */
diff --git a/net/ipv4/netfilter/ipt_cone.c b/net/ipv4/netfilter/ipt_cone.c
new file mode 100644
index 0000000..80276b4
--- /dev/null
+++ b/net/ipv4/netfilter/ipt_cone.c
@@ -0,0 +1,207 @@
+/*
+ * Kernel module to match cone target.
+ *
+ * Copyright (C) 2010, Broadcom Corporation. All Rights Reserved.
+ * 
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
+ * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
+ * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
+ * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ *
+ * $Id: ipt_cone.c,v 1.2 2010-07-12 23:55:51 Exp $
+ */
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/timer.h>
+#include <linux/skbuff.h>
+#include <linux/vmalloc.h>
+#include <net/ip.h>
+#include <linux/udp.h>
+#include <net/netfilter/nf_nat_rule.h>
+#include <linux/netfilter_ipv4.h>
+#include <linux/netfilter/x_tables.h>
+
+#define DEBUGP(format, args...)
+
+static DEFINE_RWLOCK(cone_lock);
+
+/* Calculated at init based on memory size */
+static unsigned int ipt_cone_htable_size;
+static struct list_head *bycone;
+
+static inline size_t
+hash_by_cone(__be32 ip, __be16 port, u_int8_t protonum)
+{
+	/* Original src, to ensure we map it consistently if poss. */
+	return (ip + port + protonum) % ipt_cone_htable_size;
+}
+
+static inline int
+cone_cmp(const struct nf_conn *ct,
+	const struct nf_conntrack_tuple *tuple)
+{
+	return (ct->tuplehash[IP_CT_DIR_REPLY].tuple.dst.protonum
+		== tuple->dst.protonum &&
+		ct->tuplehash[IP_CT_DIR_REPLY].tuple.dst.u3.ip
+		== tuple->dst.u3.ip &&
+		ct->tuplehash[IP_CT_DIR_REPLY].tuple.dst.u.udp.port
+		== tuple->dst.u.udp.port);
+}
+
+/* Only called for SRC manip */
+static struct nf_conn *
+find_appropriate_cone(const struct nf_conntrack_tuple *tuple)
+{
+	unsigned int h = hash_by_cone(tuple->dst.u3.ip,
+		tuple->dst.u.udp.port, tuple->dst.protonum);
+
+	struct nf_conn_nat *nat;
+	struct nf_conn *ct;
+
+	read_lock_bh(&cone_lock);
+	list_for_each_entry(nat, &bycone[h], info.bycone) {
+		ct = (struct nf_conn *)((char *)nat - offsetof(struct nf_conn, data));
+		if (cone_cmp(ct, tuple)) {
+			read_unlock_bh(&cone_lock);
+			return ct;
+		}
+	}
+	read_unlock_bh(&cone_lock);
+	return 0;
+}
+
+void
+ipt_cone_place_in_hashes(struct nf_conn *ct)
+{
+	struct nf_conn_nat *nat = nfct_nat(ct);
+	struct nf_conntrack_tuple *tuple = &ct->tuplehash[IP_CT_DIR_REPLY].tuple;
+
+	/* Make sure it's IPV4 */
+	if (tuple->src.l3num != PF_INET)
+		return;
+
+	if ((nat->info.nat_type & NFC_IP_CONE_NAT)) {
+		if (!find_appropriate_cone(tuple)) {
+			unsigned int conehash = hash_by_cone(
+				tuple->dst.u3.ip, tuple->dst.u.udp.port, tuple->dst.protonum);
+
+			write_lock_bh(&cone_lock);
+			list_add(&nat->info.bycone, &bycone[conehash]);
+			write_unlock_bh(&cone_lock);
+		}
+	}
+}
+
+void
+ipt_cone_cleanup_conntrack(struct nf_conn_nat *nat)
+{
+	if (nat->info.bycone.next) {
+		write_lock_bh(&cone_lock);
+		list_del(&nat->info.bycone);
+		write_unlock_bh(&cone_lock);
+	}
+}
+
+unsigned int
+ipt_cone_target(struct sk_buff **pskb,
+	unsigned int hooknum,
+	const struct net_device *in,
+	const struct net_device *out,
+	const struct xt_target *target,
+	const void *targinfo)
+{
+	struct nf_conn *ct;
+	struct nf_conn_nat *nat;
+	enum ip_conntrack_info ctinfo;
+	struct nf_nat_range newrange;
+	const struct nf_nat_multi_range_compat *mr = targinfo;
+	__be32 newdst;
+	__be16 newport;
+	struct nf_conntrack_tuple *tuple;
+	struct nf_conn *cone;
+
+
+	/* Care about only new created one */
+	ct = nf_ct_get(*pskb, &ctinfo);
+	if (ct == 0 || (ctinfo != IP_CT_NEW && ctinfo != IP_CT_RELATED))
+		return XT_CONTINUE;
+
+	nat = nfct_nat(ct);
+
+	/* As a matter of fact, CONE NAT should only apply on IPPROTO_UDP */
+	tuple = &ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple;
+	if (tuple->src.l3num != PF_INET || tuple->dst.protonum != IPPROTO_UDP)
+		return XT_CONTINUE;
+
+	/* Handle forwarding from WAN to LAN */
+	if (hooknum == NF_IP_FORWARD) {
+		if (nat->info.nat_type & NFC_IP_CONE_NAT_ALTERED)
+			return NF_ACCEPT;
+		else
+			return XT_CONTINUE;
+	}
+
+	/* Make sure it is pre routing */
+	if (hooknum != NF_IP_PRE_ROUTING)
+		return XT_CONTINUE;
+
+	if (nat->info.nat_type & NFC_IP_CONE_NAT_ALTERED)
+		return NF_ACCEPT;
+
+	/* Get cone dst */
+	cone = find_appropriate_cone(tuple);
+	if (cone == NULL)
+		return XT_CONTINUE;
+
+	/* Mark it's a CONE_NAT_TYPE, so NF_IP_FORWARD can accept it */
+	nat->info.nat_type |= NFC_IP_CONE_NAT_ALTERED;
+
+	/* Setup new dst ip and port */
+	newdst = cone->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u3.ip;
+	newport = cone->tuplehash[IP_CT_DIR_ORIGINAL].tuple.src.u.udp.port;
+
+	/* Transfer from original range. */
+	newrange = ((struct nf_nat_range)
+		{ mr->range[0].flags | IP_NAT_RANGE_MAP_IPS,
+		newdst, newdst,
+		{newport}, {newport} });
+
+	/* Hand modified range to generic setup. */
+	return nf_nat_setup_info(ct, &newrange, hooknum);
+}
+
+/* Init/cleanup */
+static int __init ipt_cone_init(void)
+{
+	size_t i;
+
+	/* Leave them the same for the moment. */
+	ipt_cone_htable_size = nf_conntrack_htable_size;
+
+	/* vmalloc for hash table */
+	bycone = vmalloc(sizeof(struct list_head) * ipt_cone_htable_size);
+	if (!bycone)
+		return -ENOMEM;
+
+	for (i = 0; i < ipt_cone_htable_size; i++) {
+		INIT_LIST_HEAD(&bycone[i]);
+	}
+
+	return 0;
+}
+
+static void __exit ipt_cone_cleanup(void)
+{
+	vfree(bycone);
+}
+
+module_init(ipt_cone_init);
+module_exit(ipt_cone_cleanup);
+MODULE_LICENSE("Proprietary");
diff --git a/net/ipv4/netfilter/nf_nat_autofw.c b/net/ipv4/netfilter/nf_nat_autofw.c
new file mode 100644
index 0000000..b55e16f
--- /dev/null
+++ b/net/ipv4/netfilter/nf_nat_autofw.c
@@ -0,0 +1,266 @@
+/*
+ * Automatic port forwarding target. When this target is entered, a
+ * related connection to a port in the reply direction will be
+ * expected. This connection may be mapped to a different port.
+ *
+ * Copyright (C) 2010, Broadcom Corporation. All Rights Reserved.
+ * 
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ * 
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
+ * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
+ * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
+ * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ *
+ * $Id: nf_nat_autofw.c,v 1.1 2008-10-02 03:40:29 Exp $
+ */
+
+#include <linux/config.h>
+#include <linux/types.h>
+#include <linux/ip.h>
+#include <linux/timer.h>
+#include <linux/module.h>
+#include <linux/netfilter.h>
+#include <net/protocol.h>
+#include <net/checksum.h>
+#include <net/tcp.h>
+
+#include <linux/netfilter_ipv4.h>
+#include <linux/netfilter_ipv4/ip_tables.h>
+#include <net/netfilter/nf_nat_rule.h>
+#include <linux/netfilter/x_tables.h>
+
+#include <net/netfilter/nf_conntrack_expect.h>
+#include <net/netfilter/nf_conntrack_helper.h>
+#include <linux/netfilter_ipv4/ip_autofw.h>
+
+DEFINE_RWLOCK(nf_nat_autofw_lock);
+
+#define DEBUGP(format, args...)
+
+static int
+autofw_help(struct sk_buff **pskb,
+	unsigned int protoff,
+	struct nf_conn *ct,
+	enum ip_conntrack_info ctinfo)
+{
+	return 1;
+}
+
+static void
+autofw_expect(struct nf_conn *ct, struct nf_conntrack_expect *exp)
+{
+	struct nf_nat_range pre_range;
+	u_int32_t newdstip, newsrcip;
+	u_int16_t port;
+	int ret;
+	struct nf_conn_help *help;
+	struct nf_conn *exp_ct = exp->master;
+	struct nf_conntrack_expect *newexp;
+	int count;
+
+	/* expect has been removed from expect list, but expect isn't free yet. */
+	help = nfct_help(exp_ct);
+	DEBUGP("autofw_nat_expected: got ");
+	NF_CT_DUMP_TUPLE(&ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple);
+
+	spin_lock_bh(&nf_nat_autofw_lock);
+
+	port = ntohs(ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple.dst.u.all);
+	newdstip = exp->tuple.dst.u3.ip;
+	newsrcip = exp->tuple.src.u3.ip;
+	if (port < ntohs(help->help.ct_autofw_info.dport[0]) ||
+		port > ntohs(help->help.ct_autofw_info.dport[1])) {
+		spin_unlock_bh(&nf_nat_autofw_lock);
+			return;
+	}
+
+	/* Only need to do PRE_ROUTING */
+	port -= ntohs(help->help.ct_autofw_info.dport[0]);
+	port += ntohs(help->help.ct_autofw_info.to[0]);
+	pre_range.flags = IP_NAT_RANGE_MAP_IPS | IP_NAT_RANGE_PROTO_SPECIFIED;
+	pre_range.min_ip = pre_range.max_ip = newdstip;
+	pre_range.min.all = pre_range.max.all = htons(port);
+	nf_nat_setup_info(ct, &pre_range, NF_IP_PRE_ROUTING);
+
+	spin_unlock_bh(&nf_nat_autofw_lock);
+
+	/* Add expect again */
+
+	/* alloc will set exp->master = exp_ct */
+	newexp = nf_conntrack_expect_alloc(exp_ct);
+	if (!newexp)
+		return;
+
+	newexp->tuple.src.u3.ip = exp->tuple.src.u3.ip;
+	newexp->tuple.dst.protonum = exp->tuple.dst.protonum;
+	newexp->mask.src.u3.ip = 0xFFFFFFFF;
+	newexp->mask.dst.protonum = 0xFF;
+
+	newexp->tuple.dst.u3.ip = exp->tuple.dst.u3.ip;
+	newexp->mask.dst.u3.ip = 0x0;
+
+	for (count = 1; count < NF_CT_TUPLE_L3SIZE; count++) {
+		newexp->tuple.src.u3.all[count] = 0x0;
+		newexp->tuple.dst.u3.all[count] = 0x0;
+	}
+
+	newexp->mask.dst.u.all = 0x0;
+	newexp->mask.src.u.all = 0x0;
+	newexp->mask.src.l3num = 0x0;
+
+	newexp->expectfn = autofw_expect;
+	newexp->helper = NULL;
+	newexp->flags = 0;
+
+	/*
+	 * exp->timeout.expires will set as
+	 * (jiffies + helper->timeout * HZ), when insert exp.
+	*/
+	ret = nf_conntrack_expect_related(newexp);
+	if (ret == 0)
+		nf_conntrack_expect_put(newexp);
+}
+
+
+static struct nf_conntrack_helper autofw_helper;
+
+static unsigned int
+autofw_target(struct sk_buff **pskb,
+	const struct net_device *in,
+	const struct net_device *out,
+	unsigned int hooknum,
+	const struct xt_target *target,
+	const void *targinfo)
+{
+	const struct ip_autofw_info *info = targinfo;
+	const struct iphdr *iph = ip_hdr(*pskb);
+	int ret;
+	struct nf_conntrack_helper *helper;
+	struct nf_conntrack_expect *exp;
+	struct nf_conn *ct;
+	enum ip_conntrack_info ctinfo;
+	struct nf_conn_help *help;
+	int count;
+
+	ct = nf_ct_get(*pskb, &ctinfo);
+	if (!ct)
+		goto out;
+
+	helper = __nf_conntrack_helper_find_byname("autofw");
+	if (!helper)
+		goto out;
+
+	help = nfct_help(ct);
+	help->helper = helper;
+
+	/* alloc will set exp->master = ct */
+	exp = nf_conntrack_expect_alloc(ct);
+	if (!exp)
+		goto out;
+
+	helper->me = THIS_MODULE;
+	helper->timeout = 5 * 60;
+
+	exp->tuple.src.u3.ip = iph->daddr;
+	exp->tuple.dst.protonum = info->proto;
+	exp->mask.src.u3.ip = 0xFFFFFFFF;
+	exp->mask.dst.protonum = 0xFF;
+
+	exp->tuple.dst.u3.ip = iph->saddr;
+	exp->mask.dst.u3.ip = 0x0;
+
+	for (count = 1; count < NF_CT_TUPLE_L3SIZE; count++) {
+		exp->tuple.src.u3.all[count] = 0x0;
+		exp->tuple.dst.u3.all[count] = 0x0;
+	}
+
+	exp->mask.dst.u.all = 0x0;
+	exp->mask.src.u.all = 0x0;
+	exp->mask.src.l3num = 0x0;
+
+	exp->expectfn = autofw_expect;
+	exp->helper = NULL;
+	exp->flags = 0;
+
+	/*
+	 * exp->timeout.expires will set as
+	 * (jiffies + helper->timeout * HZ), when insert exp.
+	*/
+	ret = nf_conntrack_expect_related(exp);
+	if (ret != 0)
+		goto out;
+
+	nf_conntrack_expect_put(exp);
+
+	help->help.ct_autofw_info.dport[0] = info->dport[0];
+	help->help.ct_autofw_info.dport[1] = info->dport[1];
+	help->help.ct_autofw_info.to[0] = info->to[0];
+	help->help.ct_autofw_info.to[1] = info->to[1];
+
+out:
+	return IPT_CONTINUE;
+}
+
+static int
+autofw_check(const char *tablename,
+	const void *e,
+	const struct xt_target *target,
+	void *targinfo,
+	unsigned int hook_mask)
+{
+
+	const struct ip_autofw_info *info = targinfo;
+
+	if (info->proto != IPPROTO_TCP && info->proto != IPPROTO_UDP) {
+		DEBUGP("autofw_check: bad proto %d.\n", info->proto);
+		return 0;
+	}
+
+	return 1;
+}
+
+static struct xt_target autofw = {
+	.name		= "autofw",
+	.family		= AF_INET,
+	.target		= autofw_target,
+	.targetsize	= sizeof(struct ip_autofw_info),
+	.table		= "nat",
+	.hooks		= 1 << NF_IP_PRE_ROUTING,
+	.checkentry	= autofw_check,
+	.me		= THIS_MODULE
+};
+
+static int __init ip_autofw_init(void)
+{
+	int ret;
+
+	autofw_helper.name = "autofw";
+	autofw_helper.tuple.dst.u3.ip = 0xFFFFFFFF;
+	autofw_helper.tuple.dst.protonum = 0xFF;
+	autofw_helper.mask.dst.u3.ip = 0xFFFFFFFF;
+	autofw_helper.mask.dst.protonum = 0xFF;
+	autofw_helper.tuple.src.u3.ip = 0xFFFFFFFF;
+	autofw_helper.me = THIS_MODULE;
+	autofw_helper.timeout = 5 * 60;
+	autofw_helper.help = autofw_help;
+
+	ret = nf_conntrack_helper_register(&autofw_helper);
+	if (ret)
+		nf_conntrack_helper_unregister(&autofw_helper);
+
+	return xt_register_target(&autofw);
+}
+
+static void __exit ip_autofw_fini(void)
+{
+	xt_unregister_target(&autofw);
+}
+
+module_init(ip_autofw_init);
+module_exit(ip_autofw_fini);
diff --git a/net/ipv4/netfilter/nf_nat_core.c b/net/ipv4/netfilter/nf_nat_core.c
index e6b08ac..23dcacc 100644
--- a/net/ipv4/netfilter/nf_nat_core.c
+++ b/net/ipv4/netfilter/nf_nat_core.c
@@ -31,12 +31,19 @@
 #include <net/netfilter/nf_conntrack_helper.h>
 #include <net/netfilter/nf_conntrack_l3proto.h>
 #include <net/netfilter/nf_conntrack_l4proto.h>
+#include <linux/netfilter_ipv4/ipt_cone.h>
+
+#ifdef HNDCTF
+#include <linux/if.h>
+#include <linux/if_vlan.h>
+#include <typedefs.h>
+#include <osl.h>
+#include <ctf/hndctf.h>
+
+#define NFC_CTF_ENABLED	(1 << 31)
+#endif /* HNDCTF */
 
-#if 0
-#define DEBUGP printk
-#else
 #define DEBUGP(format, args...)
-#endif
 
 static DEFINE_RWLOCK(nf_nat_lock);
 
@@ -104,6 +111,277 @@ hash_by_dst(const struct nf_conntrack_tuple *tuple)
 }
 #endif
 
+#ifdef HNDCTF
+bool
+ip_conntrack_is_ipc_allowed(struct sk_buff *skb, u_int32_t hooknum)
+{
+	struct net_device *dev;
+
+	if (!CTF_ENAB(kcih))
+		return FALSE;
+
+	if (hooknum == NF_IP_PRE_ROUTING || hooknum == NF_IP_POST_ROUTING) {
+		dev = skb->dev;
+		if (dev->priv_flags & IFF_802_1Q_VLAN)
+			dev = VLAN_DEV_INFO(dev)->real_dev;
+
+		/* Add ipc entry if packet is received on ctf enabled interface
+		 * and the packet is not a defrag'd one.
+		 */
+		if (ctf_isenabled(kcih, dev) && (skb->len <= dev->mtu))
+			skb->nfcache |= NFC_CTF_ENABLED;
+	}
+
+	/* Add the cache entries only if the device has registered and
+	 * enabled ctf.
+	 */
+	if (skb->nfcache & NFC_CTF_ENABLED)
+		return TRUE;
+
+	return FALSE;
+}
+
+void
+ip_conntrack_ipct_add(struct sk_buff *skb, u_int32_t hooknum,
+                      struct nf_conn *ct, enum ip_conntrack_info ci,
+		      struct nf_conntrack_tuple *manip)
+{
+	ctf_ipc_t ipc_entry;
+	struct hh_cache *hh;
+	struct ethhdr *eth;
+	struct iphdr *iph;
+	struct tcphdr *tcph;
+	u_int32_t daddr;
+	struct rtable *rt;
+	struct nf_conn_help *help;
+	enum ip_conntrack_dir dir;
+
+	if ((skb == NULL) || (ct == NULL))
+		return;
+
+	/* Check CTF enabled */
+	if (!ip_conntrack_is_ipc_allowed(skb, hooknum))
+		return;
+
+	/* We only add cache entires for non-helper connections and at
+	 * pre or post routing hooks.
+	 */
+	help = nfct_help(ct);
+	if ((help && help->helper) || (ct->ctf_flags & CTF_FLAGS_EXCLUDED) ||
+	    ((hooknum != NF_IP_PRE_ROUTING) && (hooknum != NF_IP_POST_ROUTING)))
+		return;
+
+	/* Add ipc entries for connections in established state only */
+	if ((ci != IP_CT_ESTABLISHED) && (ci != (IP_CT_ESTABLISHED+IP_CT_IS_REPLY)))
+		return;
+
+	iph = ip_hdr(skb);
+	if (iph->version != 4 ||
+	    (iph->protocol != IPPROTO_TCP && iph->protocol != IPPROTO_UDP))
+		return;
+	
+	if (iph->protocol == IPPROTO_TCP &&
+	    ct->proto.tcp.state >= TCP_CONNTRACK_FIN_WAIT &&
+	    ct->proto.tcp.state <= TCP_CONNTRACK_TIME_WAIT)
+		return;
+
+	dir = CTINFO2DIR(ci);
+	if (ct->ctf_flags & (1 << dir))
+		return;
+
+	/* Do route lookup for alias address if we are doing DNAT in this
+	 * direction.
+	 */
+	daddr = iph->daddr;
+	if ((manip != NULL) && (HOOK2MANIP(hooknum) == IP_NAT_MANIP_DST))
+		daddr = manip->dst.u3.ip; 
+
+	/* Find the destination interface */
+	if (skb->dst == NULL)
+		ip_route_input(skb, daddr, iph->saddr, iph->tos, skb->dev);
+
+	/* Ensure the packet belongs to a forwarding connection and it is
+	 * destined to an unicast address.
+	 */
+	rt = (struct rtable *)skb->dst;
+	if ((rt == NULL) || (rt->u.dst.input != ip_forward) ||
+	    (rt->rt_type != RTN_UNICAST) || (rt->u.dst.neighbour == NULL) ||
+	    ((rt->u.dst.neighbour->nud_state &
+	     (NUD_PERMANENT|NUD_REACHABLE|NUD_STALE|NUD_DELAY|NUD_PROBE)) == 0))
+		return;
+	
+	memset(&ipc_entry, 0, sizeof(ipc_entry));
+
+	/* Init the neighboring sender address */
+	memcpy(ipc_entry.sa.octet, eth_hdr(skb)->h_source, ETH_ALEN);
+
+	/* If the packet is received on a bridge device then save
+	 * the bridge cache entry pointer in the ip cache entry.
+	 * This will be referenced in the data path to update the
+	 * live counter of brc entry whenever a received packet
+	 * matches corresponding ipc entry matches.
+	 */
+	if ((skb->dev != NULL) && ctf_isbridge(kcih, skb->dev))
+		ipc_entry.brcp = ctf_brc_lkup(kcih, eth_hdr(skb)->h_source);
+
+	hh = skb->dst->hh;
+	if (hh != NULL) {
+		eth = (struct ethhdr *)(((unsigned char *)hh->hh_data) + 2);
+		memcpy(ipc_entry.dhost.octet, eth->h_dest, ETH_ALEN);
+		memcpy(ipc_entry.shost.octet, eth->h_source, ETH_ALEN);
+	} else {
+		memcpy(ipc_entry.dhost.octet, rt->u.dst.neighbour->ha, ETH_ALEN);
+		memcpy(ipc_entry.shost.octet, skb->dst->dev->dev_addr, ETH_ALEN);
+	}
+
+	tcph = ((struct tcphdr *)(((__u8 *)iph) + (iph->ihl << 2)));
+
+	/* Add ctf ipc entry for this direction */
+	ipc_entry.tuple.sip = iph->saddr;
+	ipc_entry.tuple.dip = iph->daddr;
+	ipc_entry.tuple.proto = iph->protocol;
+	ipc_entry.tuple.sp = tcph->source;
+	ipc_entry.tuple.dp = tcph->dest;
+
+	ipc_entry.next = NULL;
+
+	/* For vlan interfaces fill the vlan id and the tag/untag actions */
+	if (skb->dst->dev->priv_flags & IFF_802_1Q_VLAN) {
+		ipc_entry.txif = (void *)(VLAN_DEV_INFO(skb->dst->dev)->real_dev);
+		ipc_entry.vid = VLAN_DEV_INFO(skb->dst->dev)->vlan_id;
+		ipc_entry.action = ((VLAN_DEV_INFO(skb->dst->dev)->flags & 1) ?
+		                    CTF_ACTION_TAG : CTF_ACTION_UNTAG);
+	} else {
+		ipc_entry.txif = skb->dst->dev;
+		ipc_entry.action = CTF_ACTION_UNTAG;
+	}
+
+	/* Update the manip ip and port */
+	if (manip != NULL) {
+		if (HOOK2MANIP(hooknum) == IP_NAT_MANIP_SRC) {
+			ipc_entry.nat.ip = manip->src.u3.ip;
+			ipc_entry.nat.port = manip->src.u.tcp.port;
+			ipc_entry.action |= CTF_ACTION_SNAT;
+		} else {
+			ipc_entry.nat.ip = manip->dst.u3.ip;
+			ipc_entry.nat.port = manip->dst.u.tcp.port;
+			ipc_entry.action |= CTF_ACTION_DNAT;
+		}
+	}
+
+	/* Do bridge cache lookup to determine outgoing interface
+	 * and any vlan tagging actions if needed.
+	 */
+	if (ctf_isbridge(kcih, ipc_entry.txif)) {
+		ctf_brc_t *brcp;
+
+		brcp = ctf_brc_lkup(kcih, ipc_entry.dhost.octet);
+
+		if (brcp == NULL)
+			return;
+		else {
+			ipc_entry.action |= brcp->action;
+			ipc_entry.txif = brcp->txifp;
+			ipc_entry.vid = brcp->vid;
+		}
+	}
+
+#ifdef DEBUG
+	printk("%s: Adding ipc entry for [%d]%u.%u.%u.%u:%u - %u.%u.%u.%u:%u\n", __FUNCTION__,
+			ipc_entry.tuple.proto, 
+			NIPQUAD(ipc_entry.tuple.sip), ntohs(ipc_entry.tuple.sp), 
+			NIPQUAD(ipc_entry.tuple.dip), ntohs(ipc_entry.tuple.dp)); 
+	printk("sa %02x:%02x:%02x:%02x:%02x:%02x\n",
+			ipc_entry.shost.octet[0], ipc_entry.shost.octet[1],
+			ipc_entry.shost.octet[2], ipc_entry.shost.octet[3],
+			ipc_entry.shost.octet[4], ipc_entry.shost.octet[5]);
+	printk("da %02x:%02x:%02x:%02x:%02x:%02x\n",
+			ipc_entry.dhost.octet[0], ipc_entry.dhost.octet[1],
+			ipc_entry.dhost.octet[2], ipc_entry.dhost.octet[3],
+			ipc_entry.dhost.octet[4], ipc_entry.dhost.octet[5]);
+	printk("[%d] vid: %d action %x\n", hooknum, ipc_entry.vid, ipc_entry.action);
+	if (manip != NULL)
+		printk("manip_ip: %u.%u.%u.%u manip_port %u\n",
+			NIPQUAD(ipc_entry.nat.ip), ntohs(ipc_entry.nat.port));
+	printk("txif: %s\n", ((struct net_device *)ipc_entry.txif)->name);
+#endif
+
+	ctf_ipc_add(kcih, &ipc_entry);
+
+	/* Update the attributes flag to indicate a CTF conn */
+	ct->ctf_flags |= (CTF_FLAGS_CACHED | (1 << dir));
+
+}
+
+int
+ip_conntrack_ipct_delete(struct nf_conn *ct, int ct_timeout)
+{
+	ctf_ipc_t *ipct;
+	struct nf_conntrack_tuple *orig, *repl;
+
+	if (!CTF_ENAB(kcih))
+		return (0);
+
+	orig = &ct->tuplehash[IP_CT_DIR_ORIGINAL].tuple;
+
+	if ((orig->dst.protonum != IPPROTO_TCP) && (orig->dst.protonum != IPPROTO_UDP))
+		return (0);
+
+	repl = &ct->tuplehash[IP_CT_DIR_REPLY].tuple;
+
+	/* If the refresh counter of ipc entry is non zero, it indicates
+	 * that the packet transfer is active and we should not delete
+	 * the conntrack entry.
+	 */
+	if (ct_timeout) {
+		ipct = ctf_ipc_lkup(kcih, orig->src.u3.ip, orig->dst.u3.ip,
+		                    orig->dst.protonum, orig->src.u.tcp.port,
+		                    orig->dst.u.tcp.port);
+
+		/* Postpone the deletion of ct entry if there are frames
+		 * flowing in this direction.
+		 */
+		if ((ipct != NULL) && (ipct->live > 0)) {
+			ipct->live = 0;
+			ct->timeout.expires = jiffies + ct->expire_jiffies;
+			add_timer(&ct->timeout);
+			return (-1);
+		}
+
+		ipct = ctf_ipc_lkup(kcih, repl->src.u3.ip, repl->dst.u3.ip,
+		                    repl->dst.protonum, repl->src.u.tcp.port,
+		                    repl->dst.u.tcp.port);
+
+		if ((ipct != NULL) && (ipct->live > 0)) {
+			ipct->live = 0;
+			ct->timeout.expires = jiffies + ct->expire_jiffies;
+			add_timer(&ct->timeout);
+			return (-1);
+		}
+	}
+
+	/* If there are no packets over this connection for timeout period
+	 * delete the entries.
+	 */
+	ctf_ipc_delete(kcih, orig->src.u3.ip, orig->dst.u3.ip, orig->dst.protonum,
+	               orig->src.u.tcp.port, orig->dst.u.tcp.port);
+
+	ctf_ipc_delete(kcih, repl->src.u3.ip, repl->dst.u3.ip, repl->dst.protonum,
+	               repl->src.u.tcp.port, repl->dst.u.tcp.port);
+
+#ifdef DEBUG
+	printk("%s: Deleting the tuple %x %x %d %d %d\n",
+	       __FUNCTION__, orig->src.u3.ip, orig->dst.u3.ip, orig->dst.protonum,
+	       orig->src.u.tcp.port, orig->dst.u.tcp.port);
+	printk("%s: Deleting the tuple %x %x %d %d %d\n",
+	       __FUNCTION__, repl->dst.u3.ip, repl->src.u3.ip, repl->dst.protonum,
+	       repl->dst.u.tcp.port, repl->src.u.tcp.port);
+#endif
+
+	return (0);
+}
+#endif /* HNDCTF */
+
 /* Noone using conntrack by the time this called. */
 static void nf_nat_cleanup_conntrack(struct nf_conn *conn)
 {
@@ -120,6 +398,9 @@ static void nf_nat_cleanup_conntrack(struct nf_conn *conn)
 		list_del(&nat->info.by_modified_source);
 	}
 	write_unlock_bh(&nf_nat_lock);
+
+	/* Detach from cone list */
+	ipt_cone_cleanup_conntrack(nat);
 }
 
 /* Is this tuple already taken? (not by us) */
@@ -144,6 +425,7 @@ nf_nat_used_tuple(const struct nf_conntrack_tuple *tuple,
 #endif
 
 	nf_ct_invert_tuplepr(&reply, tuple);
+
 	return nf_conntrack_tuple_taken(&reply, ignored_conntrack);
 }
 EXPORT_SYMBOL(nf_nat_used_tuple);
@@ -537,10 +819,16 @@ unsigned int nf_nat_packet(struct nf_conn *ct,
 
 		/* We are aiming to look like inverse of other direction. */
 		nf_ct_invert_tuplepr(&target, &ct->tuplehash[!dir].tuple);
-
+#ifdef HNDCTF
+		ip_conntrack_ipct_add(*pskb, hooknum, ct, ctinfo, &target);
+#endif /* HNDCTF */
 		if (!manip_pkt(target.dst.protonum, pskb, 0, &target, mtype))
 			return NF_DROP;
+	} else {
+#ifdef HNDCTF
+#endif /* HNDCTF */
 	}
+
 	return NF_ACCEPT;
 }
 EXPORT_SYMBOL_GPL(nf_nat_packet);
@@ -751,7 +1039,6 @@ static int __init nf_nat_init(void)
 		INIT_LIST_HEAD(&by_modified_source[i]);
 	}
 #endif
-
 	NF_CT_ASSERT(rcu_dereference(nf_conntrack_destroyed) == NULL);
 	rcu_assign_pointer(nf_conntrack_destroyed, nf_nat_cleanup_conntrack);
 
diff --git a/net/ipv4/netfilter/nf_nat_standalone.c b/net/ipv4/netfilter/nf_nat_standalone.c
index 55dac36..bf3ade1 100644
--- a/net/ipv4/netfilter/nf_nat_standalone.c
+++ b/net/ipv4/netfilter/nf_nat_standalone.c
@@ -25,12 +25,9 @@
 #include <net/netfilter/nf_nat_core.h>
 #include <net/netfilter/nf_nat_helper.h>
 #include <linux/netfilter_ipv4/ip_tables.h>
+#include <linux/netfilter_ipv4/ipt_cone.h>
 
-#if 0
-#define DEBUGP printk
-#else
 #define DEBUGP(format, args...)
-#endif
 
 #ifdef CONFIG_XFRM
 static void nat_decode_session(struct sk_buff *skb, struct flowi *fl)
@@ -147,6 +144,9 @@ nf_nat_fn(unsigned int hooknum,
 			if (ret != NF_ACCEPT) {
 				return ret;
 			}
+
+			ipt_cone_place_in_hashes(ct);
+			
 		} else
 			DEBUGP("Already setup manip %s for ct %p\n",
 			       maniptype == IP_NAT_MANIP_SRC ? "SRC" : "DST",
