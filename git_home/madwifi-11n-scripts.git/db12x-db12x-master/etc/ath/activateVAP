#!/bin/sh
####################################################################################
##
## set_random_ssid 
##
## Set a random SSID for the given interface
## arguments
## $1 - APNAME - name of the interface eg. ath0
## 
set_random_ssid() {
    apname=$1
    apindex=$2

    if [ "${apindex}" != "0" ]; then
        vapident="_$apindex"
    else
        vapident=""
    fi
       
    RAND_SSID="AP_SSID$vapident"
    eval RAND_SSID=\$$RAND_SSID
    
    if [ "${RANDOM_SSID}" -eq "1" ]; then
        TEMP_SSID=$RAND_SSID:`ifconfig $apname | grep HWaddr | cut -d ' ' -f 11 | cut -d ":" -f 4-`
        TEMP_SSID_1=`echo $TEMP_SSID | cut -d ":" -f 1`
        TEMP_SSID_2=`echo $TEMP_SSID | cut -d ":" -f 2`
        TEMP_SSID_3=`echo $TEMP_SSID | cut -d ":" -f 3`
        TEMP_SSID_4=`echo $TEMP_SSID | cut -d ":" -f 4`
        AP_RANDOM_SSID="$TEMP_SSID_1$TEMP_SSID_2$TEMP_SSID_3$TEMP_SSID_4"
    else
        AP_RANDOM_SSID=$RAND_SSID
    fi
    cfg -a AP_RANDOM_SSID$vapident=$AP_RANDOM_SSID
    

}
#end set_random_ssid

####################################################################
## activateVAP
##
## This script is used to activate a VAP that was created earlier.
## Activation involves bringing the interface up, associating with
## a bridge, and configuring the security mode.  The VAP MUST EXIST
## prior to calling the activate script.
##
## The form of the command is
##
## activateVAP <vap> <BR> <Security> <SEC Args> <WSC>  <VAP_TIE>
##
## Where
##      vap:    Vap ID (e.g. ath0)
##       BR:    Bridge to join (or - if not bridged)
## Security:    Security mode (WEP,WPA,WSC,NONE)
## Sec Args:    File containing security configuration.  For WPA this is the hostapd
##              conf file.  For WEP this is a list of iwconfig commands setting the
##              keys.
##
## Examples:
##   Open Access Point
##      activateVAP ath0 br0 NONE
##   WPA Access Point
##      activateVAP ath1 br0 WPA wpa2-psk.conf
##   WEP Station
##      activateVAP ath0 br0 WEP wep.conf
##
###################################################################
#
## Add VLAN to switch
## params: 
##  <vlanid>        - vlan id to be added
##  <port settings> - vlan mode for each port (14 bit value)
##                    1:0 for port0, 3:2 for port 1...13:14 for port 7
##                     2'b00 :  unmodified
##                     2'b01 :  untagged
##                     2'b10 :  tagged
##                     2'b11 :  not member
##        
###################################################################
configure_switch_addvlan() {
    VVLANID=$1
    PORTSETTINGS=$2
    DEC_VLAN=$((0x80000002+($VVLANID*65536)))
    DEC_PORTSETTINGS=$((0x00180000+($PORTSETTINGS*16)))

    # Group port - 0 and 1  to given VID
    ethreg -i eth0 0x610=$DEC_PORTSETTINGS
    # BUSY is changed to bit[31],need to modify register write driver
    ethreg -i eth0 0x614=$DEC_VLAN

    # ethreg -i eth0 -p 0x18 0x0=0x3
    # ethreg -i eth0 -p 0x10 0xa=0x0002
    # ethreg -i eth0 -p 0x10 0xb=0x8002
}
###################################################################
configure_switch_remvlan() {
    VVLANID=$1
    DEC_VLAN=$((0x80000003+($VVLANID*65536)))

    ethreg -i eth0 0x610=0x1aaaa0
    # BUSY is changed to bit[31],need to modify register write driver
    ethreg -i eth0 0x614=$DEC_VLAN

    # ethreg -i eth0 -p 0x18 0x0=0x3
    # ethreg -i eth0 -p 0x10 0xa=0x0002
    # ethreg -i eth0 -p 0x10 0xb=0x8002
}
###################################################################

. /etc/ath/apcfg

if [ "${1}" = "" ]; then
    echo "activateVAP usage"
    echo "activateVAP VAPid:Radio bridge Security Security_file"
    echo
    echo "vapid: e.g. ath0"
    echo "bridge:  Name of bridge to add to,(typically br0)"
    echo "Security: [ WPA | WEP | WSC | NONE ]"
    echo "Security_file: Name of file in /etc/ath containing security config"
    echo
    exit
fi

BRIDGE=$2
SECMODE=$3
SECFILE=$4
WSCMODE=$5
VAPTIE=$6

APNAME=`echo $1 | cut -d ':' -f 1`
RADIO=`echo $1 | cut -d ':' -f 2`

#OPMODE_RSP=`acfg_tool acfg_is_offload_vap $APNAME`
#OPMODE=`echo $OPMODE_RSP | cut -d '-' -f 2 | sed 's/^[ ]//g'`

#if  [ "$OPMODE" = "6" -o "$OPMODE" = "1" ]; then
#    OFFLD_MODE="1"
#else    
#    OFFLD_MODE="0"
#fi

acfg_tool acfg_is_offload_vap $APNAME
OFFLD_MODE=$?
if  [ "$OFFLD_MODE" = "0" ]; then
    # The acfg lib / acfg_tool return 0 if vap is offload
    OFFLD_MODE="1"
else    
    OFFLD_MODE="0"
fi

if [ "$RADIO" = "" ]; then
    RADIO="0"
fi

KVER=`uname -r | cut -f 1 -d '-'`
MODULE_PATH=/lib/modules/$KVER/net
MODE=`iwconfig ${APNAME} | grep "Mode:Master"`
HOSTAPD_VER=`hostapd -v 2>&1|grep hostapd|cut -f2 -d' '`


#WPS2.0  requires WSC disabled for WPA/TKIP only  and HIDE_SSID enabled
if [ "${AP_HIDESSID}" = "1" ]; then
    echo "*** WARNING: invalid config WPS is enabled with hidden ssid !! ***"
    echo "*** WARNING: WPS is disabled  ***"
    WSCMODE=0
fi

if [ "${HOSTAPD_VER}" != "v0.5.9" ]; then
    if [ "${SECMODE}" = "WEP" -a "${WSCMODE}" != "0" ]; then
        echo "*** WARNING: WPS is enabled in WEP mode!! ***"
        echo "*** WARNING: WPS is disabled  ***"
        WSCMODE=0
    fi
    if [ "${SECMODE}" = "WPA" -a "${AP_CYPHER}" = "TKIP" -a "${WSCMODE}" != "0" ]; then
        echo "*** WARNING: WPS is enabled in TKIP only mode!! ***"
        echo "*** WARNING: WPS is disabled  ***"
        WSCMODE=0
    fi
fi



##
## Create an AP index, based on the VAP (ath) number
##

APINDEX=`echo ${APNAME}| sed -e 's/[a-z]//g'`

if [ "$APINDEX" != "0" ]; then
    APINDEX=`expr ${APINDEX} + 1`
fi

##
## First, let us see if the indicated VAP exists.  If not, it must be created
##

VAPLIST=`iwconfig | grep ${APNAME} | cut -d ' ' -f 1`

if [ "${VAPLIST}" = "" ]; then
    echo "VAP ${APNAME} must be created first!! (use makeVAP)"
    exit
fi

##
## Must determine if the scan modules need to be loaded.  Remember, only once!
## This is in station mode if the MODE value is blank
##

STATIONSCAN=`lsmod | grep wlan_scan_sta`

if [ "${MODE}" = "" -a "${STATIONSCAN}" = "" ]; then
    
    #
    # Check for a specific MAC address that is specified.  Only valid for stations
    #

    if [ "${AP_REQ_MAC}" != "" ]; then
        iwconfig $APNAME ap $AP_REQ_MAC
    fi
fi

if [ "${AP_OFFLD_MODE}" = "TUNNEL" ]; then
    byp_cli enable tunnel
    x=$(ifconfig ${APNAME}) && x=${x#*HWaddr } && x=${x%% *}
    byp_cli filteradd $x
fi

if [ "${AP_OFFLD_MODE}" = "VLAN" ]; then

    byp_cli enable vlan
    
	# Fix for EV#102346 (Radius Packets Jumbo Frame issue)
    ifconfig eth0.${AP_OFFLD_LANVLID} mtu 1500

    if [ "$APINDEX" != "0" ]; then
        VLID=`eval echo '$'AP_OFFLD_VLID_${APINDEX}`
    else
        VLID=`eval echo '$'AP_OFFLD_VLID`
    fi
    
    

    if [ "$VLID" != "0" -a "$OFFLD_MODE" = "1" ]; then

	    if [ "${VLID}" != "${AP_OFFLD_LANVLID}" ]; then
            VLEXISTS=1
            ifconfig eth0.$VLID || VLEXISTS=0

            if [ "${VLEXISTS}" != "1" ]; then
                vconfig add eth0            ${VLID}   
                ifconfig                    eth0.${VLID}        up
                byp_cli                     vlgrp_create   $VLID
                configure_switch_addvlan    $VLID   0x3ffa
            fi

        else
           byp_cli                     vlgrp_create   $VLID
           configure_switch_remvlan    $VLID
           configure_switch_addvlan    $VLID   0x155a
	    fi

      #  acfg_tool   acfg_vlgrp_addvap $VLID ${APNAME}
        byp_cli     vlgrp_addvap    $VLID ${APNAME}
    fi

fi

#
# Bring the interface up at this point!!
# configure bridge, or set an IP address for the WLAN interface
#

if [ "${BRIDGE}" != "none" -a "${BRIDGE}" != "-" ]; then
    ifconfig ${APNAME} up

    if [ "${AP_OFFLD_MODE}" != "VLAN" ]; then
        brctl addif ${BRIDGE} ${APNAME}
        echo -e "\tinterface ${APNAME}" >> /tmp/${BRIDGE}
        #
        # Add the arping command to ensure all nodes are updated on the network!
        #
        
        arping -U -c 1 -I ${BRIDGE} $AP_IPADDR
    fi

    if [ "${AP_OFFLD_MODE}" = "TUNNEL" -a "$OFFLD_MODE" = "1" ]; then
        byp_cli vapadd ${APNAME}
    fi

    if [ "${AP_OFFLD_MODE}" = "VLAN"  -a "$VLID" != "0" ]; then
        # if it is a offload radio (only offload can do acfg)
        if [ "$OFFLD_MODE" = "1" ]; then
            brctl addif ${BRIDGE} eth0.${VLID}
        else    
            brctl addif ${BRIDGE}  ${APNAME}
        fi

        arping -U -c 1 -I ${BRIDGE} $AP_IPADDR

    fi

else
    if [ "${AP_OFFLD_MODE}" = "VLAN"  -a "$VLID" != "0" -a "${OFFLD_MODE}" = "1" ]; then
        ifconfig eth0.${VLID} up ${WAN_IPADDR}
    else
        ifconfig ${APNAME} up ${WAN_IPADDR}
    fi
fi

#
# We need to determine if WSC is enabled or not.  If not, we do the standard "stuff"
#

if [ "${WSCMODE}" = "1" -o "${WSCMODE}" = "2" ]; then
	echo ">>>>> WPS ENABLED, ${SECFILE}"
    iwpriv ${APNAME} wps 1 
    ##
    ## WSC VAP.  Determine the file correctly.
    ##
    
#EV 89918 & 98568
    
    WIFIINDEX=$RADIO

    if [ "$WIFIINDEX" != "0" ]; then
        WIFIINDEX=`expr ${WIFIINDEX} + 1`
    fi
    if [ "$WIFIINDEX" != "0" ]; then
        ITER_CHMODE="AP_CHMODE_$WIFIINDEX"
        eval ITER_CHMODE=\$$ITER_CHMODE
        isa=`expr match $ITER_CHMODE .*A.*`
        isg=`expr match $ITER_CHMODE .*G.*`
    else
        isa=`expr match $AP_CHMODE .*A.*`
        isg=`expr match $AP_CHMODE .*G.*`
    fi

    if [ "${isa}" != 0 ] 
    then
        sed -i 's/hw_mode=[bg]/hw_mode=a/g' /etc/ath/WSC.conf
    else
    if [ "${isg}" != 0 ] 
    then
        sed -i 's/hw_mode=[ab]/hw_mode=g/g' /etc/ath/WSC.conf
    
    else
          sed -i 's/hw_mode=[ga]/hw_mode=b/g' /etc/ath/WSC.conf
    fi
    fi
 
    if [ "${SECFILE}" = "EAP" ]; then
        echo "Cannot use EAP modes with WPS"
        exit 255
    fi
    
    if [ ${VAPTIE} != "" ]; then
        echo ">>>>> VAPTIE: ${VAPTIE}"
        
        VAPTIE_IDX=`echo ${VAPTIE}| sed -e 's/[a-z]*//g'`

        if [ "$VAPTIE_IDX" != "0" ]; then
            VAPTIE_IDX=`expr ${VAPTIE_IDX} + 1`
        fi

        cfg -t${VAPTIE_IDX} /etc/ath/WSC.conf > /tmp/sec${APNAME}
        cat /tmp/sec${APNAME} | sed -e 's/^interface=[a-z]*[0-9]*/interface='${APNAME}'/' > /tmp/sec${APNAME}

    else
       cfg -t${APINDEX} /etc/ath/WSC.conf ${APNAME} > /tmp/sec${APNAME}
    fi

    if [ "${HOSTAPD_VER}" = "v0.5.9" ]; then
        echo -e "radio=${RADIO}" >> /tmp/sec${APNAME}
    	echo -e "\t\tbss ${APNAME}" >> /tmp/aplist$RADIO
    	echo -e "\t\t{" >> /tmp/aplist$RADIO
    	echo -e "\t\t\tconfig /tmp/sec${APNAME}" >> /tmp/aplist$RADIO
    	echo -e "\t\t}" >> /tmp/aplist$RADIO
    else
        fname="WSC_${APNAME}.conf"
        fexist=`ls /etc/wpa2 | grep ${APNAME}`
        unconf=`cat /etc/wpa2/WSC_${APNAME}.conf | grep "^wps_state=2"`
        if [ "${fexist}" = "" -o "${unconf}" = "" ]; then
            #
            # We have to use this file "in place" to have WSC work
            # properly.
            #
            echo ">>>>> WPS Translate, Index:${APINDEX}"
            set_random_ssid ${APNAME} ${APINDEX}
            cfg -t${APINDEX} /etc/ath/WSC.conf > /etc/wpa2/WSC_${APNAME}.conf
        fi
        echo -e "/etc/wpa2/WSC_${APNAME}.conf \c\h" >> /tmp/conf_filename
    fi
else
    ##
    ## Non WSC VAP.  Use Standard Security
    ##
    if [ "${SECMODE}" = "WPA" -o "${SECMODE}" = "RADIUS_MAC" ]; then
        #
        # WPA now processes all WPA sub modes
        # Here the file is "translated" from the template.
        #
        if [ "${MODE}" != "" ]; then
            #
            # This is the method using the "translation" mode of cgiMain to
            # create an appropriate security file for PSK or Enterprise mode
            #
                cfg -t${APINDEX} /etc/ath/${SECFILE}.ap_bss ${APNAME} > /tmp/sec${APNAME}

                if [ "${HOSTAPD_VER}" = "v0.5.9" ]; then
                	echo -e "\t\tbss ${APNAME}" >> /tmp/aplist$RADIO
                	echo -e "\t\t{" >> /tmp/aplist$RADIO
                	echo -e "\t\t\tconfig /tmp/sec${APNAME}" >> /tmp/aplist$RADIO
                	echo -e "\t\t}" >> /tmp/aplist$RADIO
		else
                        echo -e "/tmp/sec${APNAME} \c\h" >> /tmp/conf_filename
		fi
        else
            #
            # This is a managed (station) node
            #
            cfg -t${APINDEX} /etc/ath/${SECFILE}.sta ${APNAME} > /tmp/sup${APNAME}
            if [ "${HOSTAPD_VER}" = "v0.5.9" ]; then
            	echo -e "\tsta ${APNAME}" >> /tmp/stalist$RADIO
            	echo -e "\t{" >> /tmp/stalist$RADIO
            	echo -e "\t{" >> /tmp/stalist$RADIO
            	echo -e "\t\tconfig /tmp/sup${APNAME}" >> /tmp/stalist$RADIO
            	echo -e "\t}" >> /tmp/stalist$RADIO
	    else
                echo -e "-c/tmp/sup${APNAME} -i${APNAME} -bbr0" > /tmp/sta_conf_filename
	    fi
        fi
    fi

    if [ "${SECMODE}" = "WEP" ]; then
        NUM_KEY=1
        #
        # Insert the keys as required
        #
        my_wep_keys=" _1 _2 _3 _4 "
        for i in $my_wep_keys;
        do
            ITER_AP_WEP_RADIO_NUM0_KEY="WEP_RADIO_NUM0_KEY$i"
            ITER_AP_WEP_RADIO_NUM1_KEY="WEP_RADIO_NUM1_KEY$i"
            ITER_AP_WEP_RADIO_NUM2_KEY="WEP_RADIO_NUM2_KEY$i"
            ITER_AP_WEP_RADIO_NUM3_KEY="WEP_RADIO_NUM3_KEY$i"
            eval ITER_AP_WEP_RADIO_NUM0_KEY=\$$ITER_AP_WEP_RADIO_NUM0_KEY
            eval ITER_AP_WEP_RADIO_NUM1_KEY=\$$ITER_AP_WEP_RADIO_NUM1_KEY
            eval ITER_AP_WEP_RADIO_NUM2_KEY=\$$ITER_AP_WEP_RADIO_NUM2_KEY
            eval ITER_AP_WEP_RADIO_NUM3_KEY=\$$ITER_AP_WEP_RADIO_NUM3_KEY

            if [ "${RADIO}" = "0" ]; then
                if [ "${ITER_AP_WEP_RADIO_NUM0_KEY}" != "" ]; then
					cfg -h ${ITER_AP_WEP_RADIO_NUM0_KEY} 1
                    if [ $? = 1 ]; then
                        iwconfig ${APNAME} enc ${ITER_AP_WEP_RADIO_NUM0_KEY} [$NUM_KEY]
                    else
                        iwconfig ${APNAME} enc s:${ITER_AP_WEP_RADIO_NUM0_KEY} [$NUM_KEY]
                    fi
                fi
            fi
            if [ "${RADIO}" = "1" ]; then
                if [ "${ITER_AP_WEP_RADIO_NUM1_KEY}" != "" ]; then
					cfg -h ${ITER_AP_WEP_RADIO_NUM1_KEY} 1
                    if [ $? = 1 ]; then
                        iwconfig ${APNAME} enc ${ITER_AP_WEP_RADIO_NUM1_KEY} [$NUM_KEY]
                    else
                        iwconfig ${APNAME} enc s:${ITER_AP_WEP_RADIO_NUM1_KEY} [$NUM_KEY]
                    fi
                fi
            fi
            if [ "${RADIO}" = "2" ]; then
                if [ "${ITER_AP_WEP_RADIO_NUM2_KEY}" != "" ]; then
					cfg -h ${ITER_AP_WEP_RADIO_NUM2_KEY} 1
                    if [ $? = 1 ]; then
                        iwconfig ${APNAME} enc ${ITER_AP_WEP_RADIO_NUM2_KEY} [$NUM_KEY]
                    else
                        iwconfig ${APNAME} enc s:${ITER_AP_WEP_RADIO_NUM2_KEY} [$NUM_KEY]
                    fi
                fi
            fi
            if [ "${RADIO}" = "3" ]; then
                if [ "${ITER_AP_WEP_RADIO_NUM3_KEY}" != "" ]; then
					cfg -h ${ITER_AP_WEP_RADIO_NUM3_KEY} 1
                    if [ $? = 1 ]; then
                        iwconfig ${APNAME} enc ${ITER_AP_WEP_RADIO_NUM3_KEY} [$NUM_KEY]
                    else
                        iwconfig ${APNAME} enc s:${ITER_AP_WEP_RADIO_NUM3_KEY} [$NUM_KEY]
                    fi
                fi
            fi
            NUM_KEY=$(($NUM_KEY+1))
        done
        if [ "${RADIO}" = "0" ]; then
            if [ "${AP_WEP_MODE_0}" != "" -a "${AP_WEP_MODE_0}" != "1" ]; then
                iwpriv ${APNAME} authmode ${AP_WEP_MODE_0}
            fi
            if [ "${AP_PRIMARY_KEY_0}" != "" ]; then
                iwconfig ${APNAME} enc [${AP_PRIMARY_KEY_0}]
            fi
        fi
        if [ "${RADIO}" = "1" ]; then
            if [ "${AP_WEP_MODE_1}" != "" -a "${AP_WEP_MODE_1}" != "1" ]; then
                iwpriv ${APNAME} authmode ${AP_WEP_MODE_1}
            fi
            if [ "${AP_PRIMARY_KEY_1}" != "" ]; then
                iwconfig ${APNAME} enc [${AP_PRIMARY_KEY_1}]
            fi
        fi
        if [ "${RADIO}" = "2" ]; then
            if [ "${AP_WEP_MODE_2}" != "" -a "${AP_WEP_MODE_2}" != "1" ]; then
                iwpriv ${APNAME} authmode ${AP_WEP_MODE_2}
            fi
            if [ "${AP_PRIMARY_KEY_2}" != "" ]; then
                iwconfig ${APNAME} enc [${AP_PRIMARY_KEY_2}]
            fi
        fi
        if [ "${RADIO}" = "3" ]; then
            if [ "${AP_WEP_MODE_3}" != "" -a "${AP_WEP_MODE_3}" != "1" ]; then
                iwpriv ${APNAME} authmode ${AP_WEP_MODE_3}
            fi
            if [ "${AP_PRIMARY_KEY_3}" != "" ]; then
                iwconfig ${APNAME} enc [${AP_PRIMARY_KEY_3}]
            fi
        fi
    fi
fi

